============================= test session starts ==============================
platform linux -- Python 3.12.11, pytest-8.4.1, pluggy-1.6.0
rootdir: /app
configfile: pytest.ini
plugins: mock-3.14.1, anyio-4.9.0
collected 443 items

tests/edge_cases/test_folder_healing_edge_cases.py FFFFFFFFF             [  2%]
tests/fs/test_consistency.py ..........                                  [  4%]
tests/integration/test_dependency_analysis.py .....                      [  5%]
tests/integration/test_folder_healing.py FF                              [  5%]
tests/integration/test_learning_integration.py ...                       [  6%]
tests/integration/test_system_startup_integration.py FFFs                [  7%]
tests/temp_test.py .                                                     [  7%]
tests/test_agentic_dashboard.py .                                        [  7%]
tests/test_startup_sequence.py ....                                      [  8%]
tests/unit/test_agent_message.py .................                       [ 12%]
tests/unit/test_auto_verification.py ...                                 [ 13%]
tests/unit/test_base_agent.py .....................                      [ 18%]
tests/unit/test_bug_detector_agent.py FFFFFFFFFFFFFFFFFFFF               [ 22%]
tests/unit/test_bug_detector_enhancements.py FFFFF                       [ 23%]
tests/unit/test_chain_node.py .................                          [ 27%]
tests/unit/test_code_fixer.py .....                                      [ 28%]
tests/unit/test_engine.py .                                              [ 28%]
tests/unit/test_enhanced_message_bus.py F..F.FF...F..FFF..........       [ 34%]
tests/unit/test_feedback_collector.py F.F......                          [ 36%]
tests/unit/test_fix_impact_tracker.py ...                                [ 37%]
tests/unit/test_fs_ops.py ............F                                  [ 40%]
tests/unit/test_fs_state.py ...........                                  [ 42%]
tests/unit/test_implementation_agent.py ........                         [ 44%]
tests/unit/test_incremental_analyzer.py ..                               [ 45%]
tests/unit/test_learning_components.py ....                              [ 46%]
tests/unit/test_memory_manager.py ................                       [ 49%]
tests/unit/test_message_schema.py ........................               [ 55%]
tests/unit/test_message_schema_validator.py ................             [ 58%]
tests/unit/test_o3_provider.py ..........                                [ 60%]
tests/unit/test_orchestrator_agent.py ......F....                        [ 63%]
tests/unit/test_patch_bundle.py .....                                    [ 64%]
tests/unit/test_patcher_agent.py .........                               [ 66%]
tests/unit/test_priority_analyzer_agent.py F..                           [ 67%]
tests/unit/test_quantum_entanglement.py .........                        [ 69%]
tests/unit/test_quantum_parallelization.py .                             [ 69%]
tests/unit/test_relationship_analyst_agent.py FFFFFFFFFFFF               [ 72%]
tests/unit/test_relationship_context_provider.py ....                    [ 73%]
tests/unit/test_response_handling.py .F.FF                               [ 74%]
tests/unit/test_rollback_manager.py ....                                 [ 75%]
tests/unit/test_router.py .....                                          [ 76%]
tests/unit/test_state.py .....                                           [ 77%]
tests/unit/test_strategy_agent.py FFFFFFFFFF                             [ 79%]
tests/unit/test_system_monitor.py ...F....                               [ 81%]
tests/unit/test_system_startup.py ...........ssss                        [ 84%]
tests/unit/test_thought_chain.py .......................                 [ 90%]
tests/unit/test_thought_chain_manager.py .............                   [ 93%]
tests/unit/test_timeout_handling.py ...........                          [ 95%]
tests/unit/test_transition.py ..                                         [ 95%]
tests/unit/test_verification_agent.py ........                           [ 97%]
triangulum_lx/tests/smoke/test_simple_bug.py F                           [ 97%]
triangulum_lx/tests/unit/test_state.py ....                              [ 98%]
triangulum_lx/tests/unit/test_transition.py .....                        [100%]

=================================== FAILURES ===================================
____________ TestFolderHealingEdgeCases.test_circular_dependencies _____________

self = <edge_cases.test_folder_healing_edge_cases.TestFolderHealingEdgeCases testMethod=test_circular_dependencies>

    def test_circular_dependencies(self):
        """Test healing a folder with circular dependencies."""
        # Create a directory
        circular_dir = os.path.join(self.test_dir, "circular")
        os.makedirs(circular_dir, exist_ok=True)

        # Create files with circular dependencies
        module_a_path = os.path.join(circular_dir, "module_a.py")
        module_b_path = os.path.join(circular_dir, "module_b.py")
        module_c_path = os.path.join(circular_dir, "module_c.py")

        # Module A imports B, and has a bug
        with open(module_a_path, 'w') as f:
            f.write("# Module A - imports Module B\n")
            f.write("from module_b import ClassB\n\n")
            f.write("class ClassA:\n")
            f.write("    def __init__(self, config=None):\n")
            f.write("        self.config = config\n")
            f.write("        self.b = ClassB()\n\n")
            f.write("    def method_a(self):\n")
            f.write("        # BUG: No null check\n")
            f.write("        return self.config.value\n")

        # Module B imports C
        with open(module_b_path, 'w') as f:
            f.write("# Module B - imports Module C\n")
            f.write("from module_c import ClassC\n\n")
            f.write("class ClassB:\n")
            f.write("    def __init__(self):\n")
            f.write("        self.c = ClassC()\n\n")
            f.write("    def method_b(self):\n")
            f.write("        return self.c.method_c()\n")

        # Module C imports A, creating a circular dependency
        with open(module_c_path, 'w') as f:
            f.write("# Module C - imports Module A, creating a circular dependency\n")
            f.write("from module_a import ClassA\n\n")
            f.write("class ClassC:\n")
            f.write("    def __init__(self):\n")
            f.write("        # Comment out to avoid runtime errors, but static analysis should detect the circular import\n")
            f.write("        # self.a = ClassA()\n")
            f.write("        pass\n\n")
            f.write("    def method_c(self):\n")
            f.write("        return 'Method C'\n")

        # Run the orchestrator
>       result = self._run_orchestrator(circular_dir)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/edge_cases/test_folder_healing_edge_cases.py:328:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <edge_cases.test_folder_healing_edge_cases.TestFolderHealingEdgeCases testMethod=test_circular_dependencies>
folder_path = '/tmp/tmpdpkh94pj/circular', options = None

    def _run_orchestrator(self, folder_path, options=None):
        """Run the orchestrator on a folder."""
        # Clear previous results
        self.results = {}

        # Create a task request message
>       message = AgentMessage(
            message_type=MessageType.TASK_REQUEST,
            content={
                "action": "orchestrate_folder_healing",
                "folder_path": folder_path,
                "options": options or {"dry_run": True}
            },
            sender="test_handler",
            recipient="orchestrator"
        )
E       TypeError: AgentMessage.__init__() got an unexpected keyword argument 'recipient'

tests/edge_cases/test_folder_healing_edge_cases.py:126: TypeError
________________ TestFolderHealingEdgeCases.test_corrupted_file ________________

self = <edge_cases.test_folder_healing_edge_cases.TestFolderHealingEdgeCases testMethod=test_corrupted_file>

    def test_corrupted_file(self):
        """Test healing a folder with a corrupted Python file."""
        # Create a directory
        corrupted_dir = os.path.join(self.test_dir, "corrupted")
        os.makedirs(corrupted_dir, exist_ok=True)

        # Create a corrupted Python file (invalid syntax)
        corrupted_file_path = os.path.join(corrupted_dir, "corrupted_file.py")

        with open(corrupted_file_path, 'w') as f:
            f.write("# Corrupted Python file with invalid syntax\n\n")
            f.write("def valid_function():\n")
            f.write("    return 'This is valid'\n\n")
            f.write("class InvalidClass\n")  # Missing colon
            f.write("    def __init__(self):\n")
            f.write("        self.value = 10\n\n")
            f.write("if True\n")  # Missing colon
            f.write("    print('This will not work')\n")

        # Create a valid file with a bug
        valid_file_path = os.path.join(corrupted_dir, "valid_file.py")

        with open(valid_file_path, 'w') as f:
            f.write("# Valid Python file with a bug\n\n")
            f.write("def bug_function(param=None):\n")
            f.write("    # BUG: No null check\n")
            f.write("    return param.upper()\n")

        # Run the orchestrator
>       result = self._run_orchestrator(corrupted_dir)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/edge_cases/test_folder_healing_edge_cases.py:275:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <edge_cases.test_folder_healing_edge_cases.TestFolderHealingEdgeCases testMethod=test_corrupted_file>
folder_path = '/tmp/tmpq672bxid/corrupted', options = None

    def _run_orchestrator(self, folder_path, options=None):
        """Run the orchestrator on a folder."""
        # Clear previous results
        self.results = {}

        # Create a task request message
>       message = AgentMessage(
            message_type=MessageType.TASK_REQUEST,
            content={
                "action": "orchestrate_folder_healing",
                "folder_path": folder_path,
                "options": options or {"dry_run": True}
            },
            sender="test_handler",
            recipient="orchestrator"
        )
E       TypeError: AgentMessage.__init__() got an unexpected keyword argument 'recipient'

tests/edge_cases/test_folder_healing_edge_cases.py:126: TypeError
------------------------------ Captured log call -------------------------------
WARNING  triangulum_lx.verification.metrics:metrics.py:52 Metrics path .triangulum/verification/metrics exists but is not a directory. Attempting to create.
_________________ TestFolderHealingEdgeCases.test_empty_folder _________________

self = <edge_cases.test_folder_healing_edge_cases.TestFolderHealingEdgeCases testMethod=test_empty_folder>

    def test_empty_folder(self):
        """Test healing an empty folder."""
        # Create an empty folder
        empty_dir = os.path.join(self.test_dir, "empty")
        os.makedirs(empty_dir, exist_ok=True)

        # Run the orchestrator
>       result = self._run_orchestrator(empty_dir)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/edge_cases/test_folder_healing_edge_cases.py:153:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <edge_cases.test_folder_healing_edge_cases.TestFolderHealingEdgeCases testMethod=test_empty_folder>
folder_path = '/tmp/tmpfg4u5bbm/empty', options = None

    def _run_orchestrator(self, folder_path, options=None):
        """Run the orchestrator on a folder."""
        # Clear previous results
        self.results = {}

        # Create a task request message
>       message = AgentMessage(
            message_type=MessageType.TASK_REQUEST,
            content={
                "action": "orchestrate_folder_healing",
                "folder_path": folder_path,
                "options": options or {"dry_run": True}
            },
            sender="test_handler",
            recipient="orchestrator"
        )
E       TypeError: AgentMessage.__init__() got an unexpected keyword argument 'recipient'

tests/edge_cases/test_folder_healing_edge_cases.py:126: TypeError
------------------------------ Captured log call -------------------------------
WARNING  triangulum_lx.verification.metrics:metrics.py:52 Metrics path .triangulum/verification/metrics exists but is not a directory. Attempting to create.
_______________ TestFolderHealingEdgeCases.test_many_small_files _______________

self = <edge_cases.test_folder_healing_edge_cases.TestFolderHealingEdgeCases testMethod=test_many_small_files>

    def test_many_small_files(self):
        """Test healing a folder with many small files."""
        # Create a directory
        many_files_dir = os.path.join(self.test_dir, "many_files")
        os.makedirs(many_files_dir, exist_ok=True)

        # Create many small files
        file_count = 100  # Create 100 small files

        for i in range(file_count):
            file_path = os.path.join(many_files_dir, f"file_{i}.py")
            with open(file_path, 'w') as f:
                f.write(f"# Small Python file {i}\n\n")
                if i % 5 == 0:  # Add bug to some files
                    f.write("def bug_function(param=None):\n")
                    f.write("    # BUG: No null check\n")
                    f.write("    return param.upper()\n")
                else:
                    f.write("def safe_function(param=None):\n")
                    f.write("    if param is None:\n")
                    f.write("        return ''\n")
                    f.write("    return param.upper()\n")

        # Run the orchestrator (with limit on max files to process)
>       result = self._run_orchestrator(many_files_dir, {"max_files": 20, "dry_run": True})
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/edge_cases/test_folder_healing_edge_cases.py:463:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <edge_cases.test_folder_healing_edge_cases.TestFolderHealingEdgeCases testMethod=test_many_small_files>
folder_path = '/tmp/tmp3h6o5z_e/many_files'
options = {'dry_run': True, 'max_files': 20}

    def _run_orchestrator(self, folder_path, options=None):
        """Run the orchestrator on a folder."""
        # Clear previous results
        self.results = {}

        # Create a task request message
>       message = AgentMessage(
            message_type=MessageType.TASK_REQUEST,
            content={
                "action": "orchestrate_folder_healing",
                "folder_path": folder_path,
                "options": options or {"dry_run": True}
            },
            sender="test_handler",
            recipient="orchestrator"
        )
E       TypeError: AgentMessage.__init__() got an unexpected keyword argument 'recipient'

tests/edge_cases/test_folder_healing_edge_cases.py:126: TypeError
------------------------------ Captured log call -------------------------------
WARNING  triangulum_lx.verification.metrics:metrics.py:52 Metrics path .triangulum/verification/metrics exists but is not a directory. Attempting to create.
_______________ TestFolderHealingEdgeCases.test_mixed_languages ________________

self = <edge_cases.test_folder_healing_edge_cases.TestFolderHealingEdgeCases testMethod=test_mixed_languages>

    def test_mixed_languages(self):
        """Test healing a folder with mixed language files."""
        # Create a directory
        mixed_dir = os.path.join(self.test_dir, "mixed")
        os.makedirs(mixed_dir, exist_ok=True)

        # Create files in different languages
        languages = {
            "python.py": "# Python file with a bug\n\ndef bug_function(param=None):\n    return param.upper()\n",
            "javascript.js": "// JavaScript file\nfunction test(param) {\n    // BUG: No null check\n    return param.toUpperCase();\n}\n",
            "java.java": "// Java file\npublic class Test {\n    public String bug(String param) {\n        // BUG: No null check\n        return param.toUpperCase();\n    }\n}\n",
            "cpp.cpp": "// C++ file\n#include <string>\nstd::string bug(std::string param) {\n    // BUG: No check for empty string\n    return param + \"test\";\n}\n",
            "typescript.ts": "// TypeScript file\nfunction test(param: string): string {\n    // BUG: No null check\n    return param.toUpperCase();\n}\n"
        }

        for filename, content in languages.items():
            file_path = os.path.join(mixed_dir, filename)
            with open(file_path, 'w') as f:
                f.write(content)

        # Run the orchestrator
>       result = self._run_orchestrator(mixed_dir)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/edge_cases/test_folder_healing_edge_cases.py:397:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <edge_cases.test_folder_healing_edge_cases.TestFolderHealingEdgeCases testMethod=test_mixed_languages>
folder_path = '/tmp/tmplk7k7z5e/mixed', options = None

    def _run_orchestrator(self, folder_path, options=None):
        """Run the orchestrator on a folder."""
        # Clear previous results
        self.results = {}

        # Create a task request message
>       message = AgentMessage(
            message_type=MessageType.TASK_REQUEST,
            content={
                "action": "orchestrate_folder_healing",
                "folder_path": folder_path,
                "options": options or {"dry_run": True}
            },
            sender="test_handler",
            recipient="orchestrator"
        )
E       TypeError: AgentMessage.__init__() got an unexpected keyword argument 'recipient'

tests/edge_cases/test_folder_healing_edge_cases.py:126: TypeError
------------------------------ Captured log call -------------------------------
WARNING  triangulum_lx.verification.metrics:metrics.py:52 Metrics path .triangulum/verification/metrics exists but is not a directory. Attempting to create.
_______________ TestFolderHealingEdgeCases.test_unusual_encoding _______________

self = <edge_cases.test_folder_healing_edge_cases.TestFolderHealingEdgeCases testMethod=test_unusual_encoding>

        def test_unusual_encoding(self):
            """Test healing a folder with files that have unusual encodings."""
            # Create a directory
            encoding_dir = os.path.join(self.test_dir, "encoding")
            os.makedirs(encoding_dir, exist_ok=True)

            # Create a file with UTF-16 encoding
            utf16_file_path = os.path.join(encoding_dir, "utf16_file.py")

            # Create content with non-ASCII characters
            content = """
    # File with UTF-16 encoding and non-ASCII characters
    # Contains a bug to detect

    def greet(name=None):
        # BUG: No null check
        return "Hello, " + name + "!"

    # Non-ASCII characters: 你好, こんにちは, Привет, مرحبا, שלום
    """

            # Write with UTF-16 encoding
            with open(utf16_file_path, 'w', encoding='utf-16') as f:
                f.write(content)

            # Run the orchestrator
>           result = self._run_orchestrator(encoding_dir)
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/edge_cases/test_folder_healing_edge_cases.py:239:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <edge_cases.test_folder_healing_edge_cases.TestFolderHealingEdgeCases testMethod=test_unusual_encoding>
folder_path = '/tmp/tmpbopq3nfy/encoding', options = None

    def _run_orchestrator(self, folder_path, options=None):
        """Run the orchestrator on a folder."""
        # Clear previous results
        self.results = {}

        # Create a task request message
>       message = AgentMessage(
            message_type=MessageType.TASK_REQUEST,
            content={
                "action": "orchestrate_folder_healing",
                "folder_path": folder_path,
                "options": options or {"dry_run": True}
            },
            sender="test_handler",
            recipient="orchestrator"
        )
E       TypeError: AgentMessage.__init__() got an unexpected keyword argument 'recipient'

tests/edge_cases/test_folder_healing_edge_cases.py:126: TypeError
------------------------------ Captured log call -------------------------------
WARNING  triangulum_lx.verification.metrics:metrics.py:52 Metrics path .triangulum/verification/metrics exists but is not a directory. Attempting to create.
___________ TestFolderHealingEdgeCases.test_unusual_file_extensions ____________

self = <edge_cases.test_folder_healing_edge_cases.TestFolderHealingEdgeCases testMethod=test_unusual_file_extensions>

    def test_unusual_file_extensions(self):
        """Test healing a folder with unusual file extensions."""
        # Create a directory
        extension_dir = os.path.join(self.test_dir, "extensions")
        os.makedirs(extension_dir, exist_ok=True)

        # Create Python files with unusual extensions
        extensions = [".pyc", ".pyw", ".pyx", ".pyd", ".pyi", ".pyz"]

        for i, ext in enumerate(extensions):
            file_path = os.path.join(extension_dir, f"test_file{ext}")

            with open(file_path, 'w') as f:
                f.write(f"# Python file with unusual extension: {ext}\n\n")
                f.write("def test_function(param=None):\n")
                if i % 2 == 0:  # Add bug to some files
                    f.write("    # BUG: No null check\n")
                    f.write("    return param.lower()\n")
                else:
                    f.write("    if param is None:\n")
                    f.write("        return ''\n")
                    f.write("    return param.lower()\n")

        # Add a normal Python file for reference
        normal_file_path = os.path.join(extension_dir, "normal.py")
        with open(normal_file_path, 'w') as f:
            f.write("# Normal Python file\n\n")
            f.write("def normal_function(param=None):\n")
            f.write("    # BUG: No null check\n")
            f.write("    return param.upper()\n")

        # Run the orchestrator
>       result = self._run_orchestrator(extension_dir)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/edge_cases/test_folder_healing_edge_cases.py:367:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <edge_cases.test_folder_healing_edge_cases.TestFolderHealingEdgeCases testMethod=test_unusual_file_extensions>
folder_path = '/tmp/tmpzf4klgcr/extensions', options = None

    def _run_orchestrator(self, folder_path, options=None):
        """Run the orchestrator on a folder."""
        # Clear previous results
        self.results = {}

        # Create a task request message
>       message = AgentMessage(
            message_type=MessageType.TASK_REQUEST,
            content={
                "action": "orchestrate_folder_healing",
                "folder_path": folder_path,
                "options": options or {"dry_run": True}
            },
            sender="test_handler",
            recipient="orchestrator"
        )
E       TypeError: AgentMessage.__init__() got an unexpected keyword argument 'recipient'

tests/edge_cases/test_folder_healing_edge_cases.py:126: TypeError
------------------------------ Captured log call -------------------------------
WARNING  triangulum_lx.verification.metrics:metrics.py:52 Metrics path .triangulum/verification/metrics exists but is not a directory. Attempting to create.
________ TestFolderHealingEdgeCases.test_very_deep_directory_structure _________

self = <edge_cases.test_folder_healing_edge_cases.TestFolderHealingEdgeCases testMethod=test_very_deep_directory_structure>

    def test_very_deep_directory_structure(self):
        """Test healing a folder with a very deep directory structure."""
        # Create a deep directory structure
        current_dir = self.test_dir
        depth = 10  # Create 10 levels of nesting

        for i in range(depth):
            current_dir = os.path.join(current_dir, f"level_{i}")
            os.makedirs(current_dir, exist_ok=True)

            # Add a Python file at each level
            file_path = os.path.join(current_dir, f"file_{i}.py")
            with open(file_path, 'w') as f:
                f.write(f"# Python file at depth {i}\n\n")
                if i % 2 == 0:  # Add bug to alternating levels
                    f.write("def bug_function(param=None):\n")
                    f.write("    # BUG: No null check\n")
                    f.write("    return param.upper()\n")
                else:
                    f.write("def safe_function(param=None):\n")
                    f.write("    if param is None:\n")
                    f.write("        return ''\n")
                    f.write("    return param.upper()\n")

        # Run the orchestrator
>       result = self._run_orchestrator(self.test_dir, {"recursive": True, "dry_run": True})
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/edge_cases/test_folder_healing_edge_cases.py:432:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <edge_cases.test_folder_healing_edge_cases.TestFolderHealingEdgeCases testMethod=test_very_deep_directory_structure>
folder_path = '/tmp/tmp5eny7xjf', options = {'dry_run': True, 'recursive': True}

    def _run_orchestrator(self, folder_path, options=None):
        """Run the orchestrator on a folder."""
        # Clear previous results
        self.results = {}

        # Create a task request message
>       message = AgentMessage(
            message_type=MessageType.TASK_REQUEST,
            content={
                "action": "orchestrate_folder_healing",
                "folder_path": folder_path,
                "options": options or {"dry_run": True}
            },
            sender="test_handler",
            recipient="orchestrator"
        )
E       TypeError: AgentMessage.__init__() got an unexpected keyword argument 'recipient'

tests/edge_cases/test_folder_healing_edge_cases.py:126: TypeError
------------------------------ Captured log call -------------------------------
WARNING  triangulum_lx.verification.metrics:metrics.py:52 Metrics path .triangulum/verification/metrics exists but is not a directory. Attempting to create.
_______________ TestFolderHealingEdgeCases.test_very_large_file ________________

self = <edge_cases.test_folder_healing_edge_cases.TestFolderHealingEdgeCases testMethod=test_very_large_file>

    def test_very_large_file(self):
        """Test healing a folder with a very large file."""
        # Create a directory
        large_file_dir = os.path.join(self.test_dir, "large_file")
        os.makedirs(large_file_dir, exist_ok=True)

        # Create a large file (10 MB of random Python-like content)
        large_file_path = os.path.join(large_file_dir, "large_file.py")

        with open(large_file_path, 'w') as f:
            f.write("# Very large Python file with potential bugs\n\n")
            f.write("import os\nimport sys\n\n")

            # Generate a large class with many methods
            f.write("class LargeClass:\n")
            f.write("    def __init__(self, config=None):\n")
            f.write("        self.config = config\n")

            # Add a bug at the beginning
            f.write("    def bug_method(self):\n")
            f.write("        # BUG: No null check before accessing attribute\n")
            f.write("        return self.config.attribute\n\n")

            # Generate many methods to make the file large
            for i in range(1000):
                f.write(f"    def method_{i}(self, arg1, arg2):\n")
                f.write(f"        # Method {i}\n")
                f.write(f"        result = arg1 + arg2\n")
                f.write(f"        return result * {i}\n\n")

            # Generate a large dictionary (takes up space)
            f.write("large_dictionary = {\n")
            for i in range(10000):
                f.write(f"    'key_{i}': 'value_{''.join(random.choices(string.ascii_letters, k=20))}',\n")
            f.write("}\n\n")

            # Add a main section
            f.write("if __name__ == '__main__':\n")
            f.write("    instance = LargeClass()\n")
            f.write("    print(instance.method_999(10, 20))\n")

        # Verify the file is large (should be at least 1 MB)
        file_size = os.path.getsize(large_file_path)
>       self.assertGreater(file_size, 1_000_000)  # 1 MB minimum
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       AssertionError: 575950 not greater than 1000000

tests/edge_cases/test_folder_healing_edge_cases.py:203: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  triangulum_lx.verification.metrics:metrics.py:52 Metrics path .triangulum/verification/metrics exists but is not a directory. Attempting to create.
________________ TestFolderHealing.test_folder_healing_dry_run _________________

self = <integration.test_folder_healing.TestFolderHealing testMethod=test_folder_healing_dry_run>

    def test_folder_healing_dry_run(self):
        """Test the entire folder-level healing workflow in dry run mode."""
        # Create a task request message
>       message = AgentMessage(
            message_type=MessageType.TASK_REQUEST,
            content={
                "action": "orchestrate_folder_healing",
                "folder_path": self.test_dir,
                "options": {
                    "dry_run": True,
                    "max_files": 10,
                    "analysis_depth": 2
                }
            },
            sender="test_handler",
            recipient="orchestrator"
        )
E       TypeError: AgentMessage.__init__() got an unexpected keyword argument 'recipient'

tests/integration/test_folder_healing.py:195: TypeError
------------------------------ Captured log call -------------------------------
WARNING  triangulum_lx.verification.metrics:metrics.py:52 Metrics path .triangulum/verification/metrics exists but is not a directory. Attempting to create.
_________ TestFolderHealing.test_orchestrator_real_healing_simulation __________

self = <integration.test_folder_healing.TestFolderHealing testMethod=test_orchestrator_real_healing_simulation>

    def test_orchestrator_real_healing_simulation(self):
        """
        Test that the orchestrator correctly simulates a real healing process.

        Instead of actually modifying files, this test mocks the key methods
        to simulate the healing process without modifying real files.
        """
        # Create a copy of our test directory
        sim_dir = tempfile.mkdtemp()
        try:
            # Copy test project to simulation directory
            shutil.copytree(self.test_dir, sim_dir, dirs_exist_ok=True)

            # Create a simulated message
>           message = AgentMessage(
                message_type=MessageType.TASK_REQUEST,
                content={
                    "action": "orchestrate_folder_healing",
                    "folder_path": sim_dir,
                    "options": {"dry_run": False}
                },
                sender="test_handler",
                recipient="orchestrator"
            )
E           TypeError: AgentMessage.__init__() got an unexpected keyword argument 'recipient'

tests/integration/test_folder_healing.py:299: TypeError
------------------------------ Captured log call -------------------------------
WARNING  triangulum_lx.verification.metrics:metrics.py:52 Metrics path .triangulum/verification/metrics exists but is not a directory. Attempting to create.
_____________ TestSystemStartupIntegration.test_graceful_shutdown ______________

self = <integration.test_system_startup_integration.TestSystemStartupIntegration testMethod=test_graceful_shutdown>
mock_init_message_bus = <MagicMock name='_init_message_bus' id='140062898431968'>
mock_init_provider_factory = <MagicMock name='_init_provider_factory' id='140062898437920'>
mock_init_agent_factory = <MagicMock name='_init_agent_factory' id='140062896426544'>
mock_init_meta_agent = <MagicMock name='_init_meta_agent' id='140062898432352'>
mock_init_bug_detector = <MagicMock name='_init_bug_detector' id='140062896432016'>
mock_shutdown_message_bus = <MagicMock name='_shutdown_message_bus' id='140062896435856'>
mock_shutdown_provider_factory = <MagicMock name='_shutdown_provider_factory' id='140062896439760'>
mock_shutdown_agent_factory = <MagicMock name='_shutdown_agent_factory' id='140062896443600'>

    @patch('triangulum_lx.core.engine.TriangulumEngine._shutdown_agent_factory')
    @patch('triangulum_lx.core.engine.TriangulumEngine._shutdown_provider_factory')
    @patch('triangulum_lx.core.engine.TriangulumEngine._shutdown_message_bus')
    @patch('triangulum_lx.core.engine.TriangulumEngine._init_bug_detector')
    @patch('triangulum_lx.core.engine.TriangulumEngine._init_meta_agent')
    @patch('triangulum_lx.core.engine.TriangulumEngine._init_agent_factory')
    @patch('triangulum_lx.core.engine.TriangulumEngine._init_provider_factory')
    @patch('triangulum_lx.core.engine.TriangulumEngine._init_message_bus')
    def test_graceful_shutdown(self, mock_init_message_bus, mock_init_provider_factory,
                             mock_init_agent_factory, mock_init_meta_agent, mock_init_bug_detector,
                             mock_shutdown_message_bus, mock_shutdown_provider_factory,
                             mock_shutdown_agent_factory):
        """Test graceful shutdown of system components."""
        # Configure mocks to return component instances
        mock_init_message_bus.return_value = Mock(name="message_bus")
        mock_init_provider_factory.return_value = Mock(name="provider_factory")
        mock_init_agent_factory.return_value = Mock(name="agent_factory")
        mock_init_meta_agent.return_value = Mock(name="meta_agent")
        mock_init_bug_detector.return_value = Mock(name="bug_detector")

        # Create an engine with the test configuration
        engine = TriangulumEngine(self.test_config)

        # Initialize engine
        result = engine.initialize()

        # Verify initialization was successful
>       self.assertTrue(result)
E       AssertionError: False is not true

tests/integration/test_system_startup_integration.py:97: AssertionError
------------------------------ Captured log call -------------------------------
ERROR    triangulum.engine:engine.py:210 Configuration validation failed: Missing 'llm' section in main config.
ERROR    triangulum.engine:engine.py:159 Configuration validation failed
_______ TestSystemStartupIntegration.test_startup_dashboard_integration ________

self = <integration.test_system_startup_integration.TestSystemStartupIntegration testMethod=test_startup_dashboard_integration>
mock_init_message_bus = <MagicMock name='_init_message_bus' id='140062896450176'>
mock_init_provider_factory = <MagicMock name='_init_provider_factory' id='140062896454592'>
mock_init_agent_factory = <MagicMock name='_init_agent_factory' id='140062896491216'>
mock_init_meta_agent = <MagicMock name='_init_meta_agent' id='140062896495056'>
mock_init_bug_detector = <MagicMock name='_init_bug_detector' id='140062896498896'>

    @patch('triangulum_lx.core.engine.TriangulumEngine._init_bug_detector')
    @patch('triangulum_lx.core.engine.TriangulumEngine._init_meta_agent')
    @patch('triangulum_lx.core.engine.TriangulumEngine._init_agent_factory')
    @patch('triangulum_lx.core.engine.TriangulumEngine._init_provider_factory')
    @patch('triangulum_lx.core.engine.TriangulumEngine._init_message_bus')
    def test_startup_dashboard_integration(self, mock_init_message_bus, mock_init_provider_factory,
                                        mock_init_agent_factory, mock_init_meta_agent, mock_init_bug_detector):
        """Test integration between engine initialization and dashboard monitoring."""
        # Configure mocks to return component instances
        mock_init_message_bus.return_value = Mock(name="message_bus")
        mock_init_provider_factory.return_value = Mock(name="provider_factory")
        mock_init_agent_factory.return_value = Mock(name="agent_factory")
        mock_init_meta_agent.return_value = Mock(name="meta_agent")
        mock_init_bug_detector.return_value = Mock(name="bug_detector")

        # Create a dashboard
        dashboard = StartupDashboard()

        # Create an engine with the test configuration
        engine = TriangulumEngine(self.test_config)

        # Start monitoring
        dashboard.start_monitoring(engine=engine, update_interval=0.1)

        # Initialize engine
        result = engine.initialize(parallel=False)

        # Verify initialization was successful
>       self.assertTrue(result)
E       AssertionError: False is not true

tests/integration/test_system_startup_integration.py:187: AssertionError
------------------------------ Captured log call -------------------------------
ERROR    triangulum.engine:engine.py:210 Configuration validation failed: Missing 'llm' section in main config.
ERROR    triangulum.engine:engine.py:159 Configuration validation failed
__________ TestSystemStartupIntegration.test_system_health_monitoring __________

self = <integration.test_system_startup_integration.TestSystemStartupIntegration testMethod=test_system_health_monitoring>
mock_init_message_bus = <MagicMock name='_init_message_bus' id='140062896570496'>
mock_init_provider_factory = <MagicMock name='_init_provider_factory' id='140062896574384'>
mock_init_agent_factory = <MagicMock name='_init_agent_factory' id='140062896578224'>
mock_init_meta_agent = <MagicMock name='_init_meta_agent' id='140062896582064'>
mock_init_bug_detector = <MagicMock name='_init_bug_detector' id='140062896585904'>
mock_check_health = <MagicMock name='_check_system_health' id='140062896606240'>

    @patch('triangulum_lx.core.engine.TriangulumEngine._check_system_health')
    @patch('triangulum_lx.core.engine.TriangulumEngine._init_bug_detector')
    @patch('triangulum_lx.core.engine.TriangulumEngine._init_meta_agent')
    @patch('triangulum_lx.core.engine.TriangulumEngine._init_agent_factory')
    @patch('triangulum_lx.core.engine.TriangulumEngine._init_provider_factory')
    @patch('triangulum_lx.core.engine.TriangulumEngine._init_message_bus')
    def test_system_health_monitoring(self, mock_init_message_bus, mock_init_provider_factory,
                                   mock_init_agent_factory, mock_init_meta_agent, mock_init_bug_detector,
                                   mock_check_health):
        """Test system health monitoring."""
        # Configure mocks to return component instances
        mock_init_message_bus.return_value = Mock(name="message_bus")
        mock_init_provider_factory.return_value = Mock(name="provider_factory")
        mock_init_agent_factory.return_value = Mock(name="agent_factory")
        mock_init_meta_agent.return_value = Mock(name="meta_agent")
        mock_init_bug_detector.return_value = Mock(name="bug_detector")

        # Mock the health check to return a valid status
        mock_check_health.return_value = {
            "overall_health": True,
            "components": {
                "message_bus": {"status": "ready"},
                "provider_factory": {"status": "ready"},
                "agent_factory": {"status": "ready"}
            }
        }

        # Create an engine with the test configuration
        engine = TriangulumEngine(self.test_config)

        # Initialize engine
        result = engine.initialize()

        # Verify initialization was successful
>       self.assertTrue(result)
E       AssertionError: False is not true

tests/integration/test_system_startup_integration.py:145: AssertionError
------------------------------ Captured log call -------------------------------
ERROR    triangulum.engine:engine.py:210 Configuration validation failed: Missing 'llm' section in main config.
ERROR    triangulum.engine:engine.py:159 Configuration validation failed
________________ TestBugDetectorAgent.test_analyze_test_failure ________________

self = <unit.test_bug_detector_agent.TestBugDetectorAgent testMethod=test_analyze_test_failure>

    def setUp(self):
        """Set up the test environment."""
        # Create a temporary directory for test files
        self.temp_dir = tempfile.mkdtemp()

        # Create the agent with a mock message bus
        self.message_bus = MagicMock()
>       self.agent = BugDetectorAgent(
            agent_id="test_bug_detector",
            message_bus=self.message_bus,
            max_bug_patterns=100,
            max_file_size=1024 * 1024  # 1 MB
        )

tests/unit/test_bug_detector_agent.py:28:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <triangulum_lx.agents.bug_detector_agent.BugDetectorAgent object at 0x7f62ef542d20>
agent_id = 'test_bug_detector', message_bus = <MagicMock id='140062898180832'>
config = None, kwargs = {'max_bug_patterns': 100, 'max_file_size': 1048576}

    def __init__(
        self,
        agent_id: Optional[str] = None,
        # agent_type: str = "bug_detector", # Use AGENT_TYPE
        message_bus: Optional[EnhancedMessageBus] = None,
        # subscribed_message_types: Optional[List[MessageType]] = None, # Define in super
        config: Optional[Dict[str, Any]] = None,
        **kwargs # Added for BaseAgent params like engine_monitor
    ):
        """
        Initialize the Bug Detector Agent.

        Args:
            agent_id: Unique identifier for the agent (generated if not provided)
            message_bus: Message bus for agent communication
            config: Agent configuration dictionary. Expected to contain keys like:
                    'max_bug_patterns', 'max_file_size',
                    'relationship_analyst_agent_id' (optional),
                    'enable_context_aware_detection', 'enable_multi_pass_verification',
                    'false_positive_threshold', 'use_ast_parsing'.
        """
>       super().__init__(
            agent_id=agent_id,
            agent_type=self.AGENT_TYPE,
            message_bus=message_bus,
            subscribed_message_types=[MessageType.TASK_REQUEST, MessageType.QUERY], # Define directly
            config=config,
            **kwargs # Pass kwargs
        )
E       TypeError: BaseAgent.__init__() got an unexpected keyword argument 'max_bug_patterns'

triangulum_lx/agents/bug_detector_agent.py:235: TypeError
_______________ TestBugDetectorAgent.test_binary_file_detection ________________

self = <unit.test_bug_detector_agent.TestBugDetectorAgent testMethod=test_binary_file_detection>

    def setUp(self):
        """Set up the test environment."""
        # Create a temporary directory for test files
        self.temp_dir = tempfile.mkdtemp()

        # Create the agent with a mock message bus
        self.message_bus = MagicMock()
>       self.agent = BugDetectorAgent(
            agent_id="test_bug_detector",
            message_bus=self.message_bus,
            max_bug_patterns=100,
            max_file_size=1024 * 1024  # 1 MB
        )

tests/unit/test_bug_detector_agent.py:28:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <triangulum_lx.agents.bug_detector_agent.BugDetectorAgent object at 0x7f62ef4a8890>
agent_id = 'test_bug_detector', message_bus = <MagicMock id='140062898163200'>
config = None, kwargs = {'max_bug_patterns': 100, 'max_file_size': 1048576}

    def __init__(
        self,
        agent_id: Optional[str] = None,
        # agent_type: str = "bug_detector", # Use AGENT_TYPE
        message_bus: Optional[EnhancedMessageBus] = None,
        # subscribed_message_types: Optional[List[MessageType]] = None, # Define in super
        config: Optional[Dict[str, Any]] = None,
        **kwargs # Added for BaseAgent params like engine_monitor
    ):
        """
        Initialize the Bug Detector Agent.

        Args:
            agent_id: Unique identifier for the agent (generated if not provided)
            message_bus: Message bus for agent communication
            config: Agent configuration dictionary. Expected to contain keys like:
                    'max_bug_patterns', 'max_file_size',
                    'relationship_analyst_agent_id' (optional),
                    'enable_context_aware_detection', 'enable_multi_pass_verification',
                    'false_positive_threshold', 'use_ast_parsing'.
        """
>       super().__init__(
            agent_id=agent_id,
            agent_type=self.AGENT_TYPE,
            message_bus=message_bus,
            subscribed_message_types=[MessageType.TASK_REQUEST, MessageType.QUERY], # Define directly
            config=config,
            **kwargs # Pass kwargs
        )
E       TypeError: BaseAgent.__init__() got an unexpected keyword argument 'max_bug_patterns'

triangulum_lx/agents/bug_detector_agent.py:235: TypeError
_______________ TestBugDetectorAgent.test_bug_pattern_management _______________

self = <unit.test_bug_detector_agent.TestBugDetectorAgent testMethod=test_bug_pattern_management>

    def setUp(self):
        """Set up the test environment."""
        # Create a temporary directory for test files
        self.temp_dir = tempfile.mkdtemp()

        # Create the agent with a mock message bus
        self.message_bus = MagicMock()
>       self.agent = BugDetectorAgent(
            agent_id="test_bug_detector",
            message_bus=self.message_bus,
            max_bug_patterns=100,
            max_file_size=1024 * 1024  # 1 MB
        )

tests/unit/test_bug_detector_agent.py:28:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <triangulum_lx.agents.bug_detector_agent.BugDetectorAgent object at 0x7f62ef4bfe30>
agent_id = 'test_bug_detector', message_bus = <MagicMock id='140062898164496'>
config = None, kwargs = {'max_bug_patterns': 100, 'max_file_size': 1048576}

    def __init__(
        self,
        agent_id: Optional[str] = None,
        # agent_type: str = "bug_detector", # Use AGENT_TYPE
        message_bus: Optional[EnhancedMessageBus] = None,
        # subscribed_message_types: Optional[List[MessageType]] = None, # Define in super
        config: Optional[Dict[str, Any]] = None,
        **kwargs # Added for BaseAgent params like engine_monitor
    ):
        """
        Initialize the Bug Detector Agent.

        Args:
            agent_id: Unique identifier for the agent (generated if not provided)
            message_bus: Message bus for agent communication
            config: Agent configuration dictionary. Expected to contain keys like:
                    'max_bug_patterns', 'max_file_size',
                    'relationship_analyst_agent_id' (optional),
                    'enable_context_aware_detection', 'enable_multi_pass_verification',
                    'false_positive_threshold', 'use_ast_parsing'.
        """
>       super().__init__(
            agent_id=agent_id,
            agent_type=self.AGENT_TYPE,
            message_bus=message_bus,
            subscribed_message_types=[MessageType.TASK_REQUEST, MessageType.QUERY], # Define directly
            config=config,
            **kwargs # Pass kwargs
        )
E       TypeError: BaseAgent.__init__() got an unexpected keyword argument 'max_bug_patterns'

triangulum_lx/agents/bug_detector_agent.py:235: TypeError
__________ TestBugDetectorAgent.test_detect_exception_swallowing_bug ___________

self = <unit.test_bug_detector_agent.TestBugDetectorAgent testMethod=test_detect_exception_swallowing_bug>

    def setUp(self):
        """Set up the test environment."""
        # Create a temporary directory for test files
        self.temp_dir = tempfile.mkdtemp()

        # Create the agent with a mock message bus
        self.message_bus = MagicMock()
>       self.agent = BugDetectorAgent(
            agent_id="test_bug_detector",
            message_bus=self.message_bus,
            max_bug_patterns=100,
            max_file_size=1024 * 1024  # 1 MB
        )

tests/unit/test_bug_detector_agent.py:28:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <triangulum_lx.agents.bug_detector_agent.BugDetectorAgent object at 0x7f62ef304c20>
agent_id = 'test_bug_detector', message_bus = <MagicMock id='140063536682224'>
config = None, kwargs = {'max_bug_patterns': 100, 'max_file_size': 1048576}

    def __init__(
        self,
        agent_id: Optional[str] = None,
        # agent_type: str = "bug_detector", # Use AGENT_TYPE
        message_bus: Optional[EnhancedMessageBus] = None,
        # subscribed_message_types: Optional[List[MessageType]] = None, # Define in super
        config: Optional[Dict[str, Any]] = None,
        **kwargs # Added for BaseAgent params like engine_monitor
    ):
        """
        Initialize the Bug Detector Agent.

        Args:
            agent_id: Unique identifier for the agent (generated if not provided)
            message_bus: Message bus for agent communication
            config: Agent configuration dictionary. Expected to contain keys like:
                    'max_bug_patterns', 'max_file_size',
                    'relationship_analyst_agent_id' (optional),
                    'enable_context_aware_detection', 'enable_multi_pass_verification',
                    'false_positive_threshold', 'use_ast_parsing'.
        """
>       super().__init__(
            agent_id=agent_id,
            agent_type=self.AGENT_TYPE,
            message_bus=message_bus,
            subscribed_message_types=[MessageType.TASK_REQUEST, MessageType.QUERY], # Define directly
            config=config,
            **kwargs # Pass kwargs
        )
E       TypeError: BaseAgent.__init__() got an unexpected keyword argument 'max_bug_patterns'

triangulum_lx/agents/bug_detector_agent.py:235: TypeError
__________ TestBugDetectorAgent.test_detect_hardcoded_credentials_bug __________

self = <unit.test_bug_detector_agent.TestBugDetectorAgent testMethod=test_detect_hardcoded_credentials_bug>

    def setUp(self):
        """Set up the test environment."""
        # Create a temporary directory for test files
        self.temp_dir = tempfile.mkdtemp()

        # Create the agent with a mock message bus
        self.message_bus = MagicMock()
>       self.agent = BugDetectorAgent(
            agent_id="test_bug_detector",
            message_bus=self.message_bus,
            max_bug_patterns=100,
            max_file_size=1024 * 1024  # 1 MB
        )

tests/unit/test_bug_detector_agent.py:28:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <triangulum_lx.agents.bug_detector_agent.BugDetectorAgent object at 0x7f62ef305c40>
agent_id = 'test_bug_detector', message_bus = <MagicMock id='140062896445232'>
config = None, kwargs = {'max_bug_patterns': 100, 'max_file_size': 1048576}

    def __init__(
        self,
        agent_id: Optional[str] = None,
        # agent_type: str = "bug_detector", # Use AGENT_TYPE
        message_bus: Optional[EnhancedMessageBus] = None,
        # subscribed_message_types: Optional[List[MessageType]] = None, # Define in super
        config: Optional[Dict[str, Any]] = None,
        **kwargs # Added for BaseAgent params like engine_monitor
    ):
        """
        Initialize the Bug Detector Agent.

        Args:
            agent_id: Unique identifier for the agent (generated if not provided)
            message_bus: Message bus for agent communication
            config: Agent configuration dictionary. Expected to contain keys like:
                    'max_bug_patterns', 'max_file_size',
                    'relationship_analyst_agent_id' (optional),
                    'enable_context_aware_detection', 'enable_multi_pass_verification',
                    'false_positive_threshold', 'use_ast_parsing'.
        """
>       super().__init__(
            agent_id=agent_id,
            agent_type=self.AGENT_TYPE,
            message_bus=message_bus,
            subscribed_message_types=[MessageType.TASK_REQUEST, MessageType.QUERY], # Define directly
            config=config,
            **kwargs # Pass kwargs
        )
E       TypeError: BaseAgent.__init__() got an unexpected keyword argument 'max_bug_patterns'

triangulum_lx/agents/bug_detector_agent.py:235: TypeError
_____________ TestBugDetectorAgent.test_detect_null_reference_bug ______________

self = <unit.test_bug_detector_agent.TestBugDetectorAgent testMethod=test_detect_null_reference_bug>

    def setUp(self):
        """Set up the test environment."""
        # Create a temporary directory for test files
        self.temp_dir = tempfile.mkdtemp()

        # Create the agent with a mock message bus
        self.message_bus = MagicMock()
>       self.agent = BugDetectorAgent(
            agent_id="test_bug_detector",
            message_bus=self.message_bus,
            max_bug_patterns=100,
            max_file_size=1024 * 1024  # 1 MB
        )

tests/unit/test_bug_detector_agent.py:28:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <triangulum_lx.agents.bug_detector_agent.BugDetectorAgent object at 0x7f62ef4782c0>
agent_id = 'test_bug_detector', message_bus = <MagicMock id='140062898244016'>
config = None, kwargs = {'max_bug_patterns': 100, 'max_file_size': 1048576}

    def __init__(
        self,
        agent_id: Optional[str] = None,
        # agent_type: str = "bug_detector", # Use AGENT_TYPE
        message_bus: Optional[EnhancedMessageBus] = None,
        # subscribed_message_types: Optional[List[MessageType]] = None, # Define in super
        config: Optional[Dict[str, Any]] = None,
        **kwargs # Added for BaseAgent params like engine_monitor
    ):
        """
        Initialize the Bug Detector Agent.

        Args:
            agent_id: Unique identifier for the agent (generated if not provided)
            message_bus: Message bus for agent communication
            config: Agent configuration dictionary. Expected to contain keys like:
                    'max_bug_patterns', 'max_file_size',
                    'relationship_analyst_agent_id' (optional),
                    'enable_context_aware_detection', 'enable_multi_pass_verification',
                    'false_positive_threshold', 'use_ast_parsing'.
        """
>       super().__init__(
            agent_id=agent_id,
            agent_type=self.AGENT_TYPE,
            message_bus=message_bus,
            subscribed_message_types=[MessageType.TASK_REQUEST, MessageType.QUERY], # Define directly
            config=config,
            **kwargs # Pass kwargs
        )
E       TypeError: BaseAgent.__init__() got an unexpected keyword argument 'max_bug_patterns'

triangulum_lx/agents/bug_detector_agent.py:235: TypeError
______________ TestBugDetectorAgent.test_detect_resource_leak_bug ______________

self = <unit.test_bug_detector_agent.TestBugDetectorAgent testMethod=test_detect_resource_leak_bug>

    def setUp(self):
        """Set up the test environment."""
        # Create a temporary directory for test files
        self.temp_dir = tempfile.mkdtemp()

        # Create the agent with a mock message bus
        self.message_bus = MagicMock()
>       self.agent = BugDetectorAgent(
            agent_id="test_bug_detector",
            message_bus=self.message_bus,
            max_bug_patterns=100,
            max_file_size=1024 * 1024  # 1 MB
        )

tests/unit/test_bug_detector_agent.py:28:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <triangulum_lx.agents.bug_detector_agent.BugDetectorAgent object at 0x7f62ef47b890>
agent_id = 'test_bug_detector', message_bus = <MagicMock id='140062897967120'>
config = None, kwargs = {'max_bug_patterns': 100, 'max_file_size': 1048576}

    def __init__(
        self,
        agent_id: Optional[str] = None,
        # agent_type: str = "bug_detector", # Use AGENT_TYPE
        message_bus: Optional[EnhancedMessageBus] = None,
        # subscribed_message_types: Optional[List[MessageType]] = None, # Define in super
        config: Optional[Dict[str, Any]] = None,
        **kwargs # Added for BaseAgent params like engine_monitor
    ):
        """
        Initialize the Bug Detector Agent.

        Args:
            agent_id: Unique identifier for the agent (generated if not provided)
            message_bus: Message bus for agent communication
            config: Agent configuration dictionary. Expected to contain keys like:
                    'max_bug_patterns', 'max_file_size',
                    'relationship_analyst_agent_id' (optional),
                    'enable_context_aware_detection', 'enable_multi_pass_verification',
                    'false_positive_threshold', 'use_ast_parsing'.
        """
>       super().__init__(
            agent_id=agent_id,
            agent_type=self.AGENT_TYPE,
            message_bus=message_bus,
            subscribed_message_types=[MessageType.TASK_REQUEST, MessageType.QUERY], # Define directly
            config=config,
            **kwargs # Pass kwargs
        )
E       TypeError: BaseAgent.__init__() got an unexpected keyword argument 'max_bug_patterns'

triangulum_lx/agents/bug_detector_agent.py:235: TypeError
______________ TestBugDetectorAgent.test_detect_sql_injection_bug ______________

self = <unit.test_bug_detector_agent.TestBugDetectorAgent testMethod=test_detect_sql_injection_bug>

    def setUp(self):
        """Set up the test environment."""
        # Create a temporary directory for test files
        self.temp_dir = tempfile.mkdtemp()

        # Create the agent with a mock message bus
        self.message_bus = MagicMock()
>       self.agent = BugDetectorAgent(
            agent_id="test_bug_detector",
            message_bus=self.message_bus,
            max_bug_patterns=100,
            max_file_size=1024 * 1024  # 1 MB
        )

tests/unit/test_bug_detector_agent.py:28:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <triangulum_lx.agents.bug_detector_agent.BugDetectorAgent object at 0x7f62ef47b080>
agent_id = 'test_bug_detector', message_bus = <MagicMock id='140062897968848'>
config = None, kwargs = {'max_bug_patterns': 100, 'max_file_size': 1048576}

    def __init__(
        self,
        agent_id: Optional[str] = None,
        # agent_type: str = "bug_detector", # Use AGENT_TYPE
        message_bus: Optional[EnhancedMessageBus] = None,
        # subscribed_message_types: Optional[List[MessageType]] = None, # Define in super
        config: Optional[Dict[str, Any]] = None,
        **kwargs # Added for BaseAgent params like engine_monitor
    ):
        """
        Initialize the Bug Detector Agent.

        Args:
            agent_id: Unique identifier for the agent (generated if not provided)
            message_bus: Message bus for agent communication
            config: Agent configuration dictionary. Expected to contain keys like:
                    'max_bug_patterns', 'max_file_size',
                    'relationship_analyst_agent_id' (optional),
                    'enable_context_aware_detection', 'enable_multi_pass_verification',
                    'false_positive_threshold', 'use_ast_parsing'.
        """
>       super().__init__(
            agent_id=agent_id,
            agent_type=self.AGENT_TYPE,
            message_bus=message_bus,
            subscribed_message_types=[MessageType.TASK_REQUEST, MessageType.QUERY], # Define directly
            config=config,
            **kwargs # Pass kwargs
        )
E       TypeError: BaseAgent.__init__() got an unexpected keyword argument 'max_bug_patterns'

triangulum_lx/agents/bug_detector_agent.py:235: TypeError
__________ TestBugDetectorAgent.test_encoding_detection_and_handling ___________

self = <unit.test_bug_detector_agent.TestBugDetectorAgent testMethod=test_encoding_detection_and_handling>

    def setUp(self):
        """Set up the test environment."""
        # Create a temporary directory for test files
        self.temp_dir = tempfile.mkdtemp()

        # Create the agent with a mock message bus
        self.message_bus = MagicMock()
>       self.agent = BugDetectorAgent(
            agent_id="test_bug_detector",
            message_bus=self.message_bus,
            max_bug_patterns=100,
            max_file_size=1024 * 1024  # 1 MB
        )

tests/unit/test_bug_detector_agent.py:28:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <triangulum_lx.agents.bug_detector_agent.BugDetectorAgent object at 0x7f62ef3018b0>
agent_id = 'test_bug_detector', message_bus = <MagicMock id='140062897968560'>
config = None, kwargs = {'max_bug_patterns': 100, 'max_file_size': 1048576}

    def __init__(
        self,
        agent_id: Optional[str] = None,
        # agent_type: str = "bug_detector", # Use AGENT_TYPE
        message_bus: Optional[EnhancedMessageBus] = None,
        # subscribed_message_types: Optional[List[MessageType]] = None, # Define in super
        config: Optional[Dict[str, Any]] = None,
        **kwargs # Added for BaseAgent params like engine_monitor
    ):
        """
        Initialize the Bug Detector Agent.

        Args:
            agent_id: Unique identifier for the agent (generated if not provided)
            message_bus: Message bus for agent communication
            config: Agent configuration dictionary. Expected to contain keys like:
                    'max_bug_patterns', 'max_file_size',
                    'relationship_analyst_agent_id' (optional),
                    'enable_context_aware_detection', 'enable_multi_pass_verification',
                    'false_positive_threshold', 'use_ast_parsing'.
        """
>       super().__init__(
            agent_id=agent_id,
            agent_type=self.AGENT_TYPE,
            message_bus=message_bus,
            subscribed_message_types=[MessageType.TASK_REQUEST, MessageType.QUERY], # Define directly
            config=config,
            **kwargs # Pass kwargs
        )
E       TypeError: BaseAgent.__init__() got an unexpected keyword argument 'max_bug_patterns'

triangulum_lx/agents/bug_detector_agent.py:235: TypeError
___________________ TestBugDetectorAgent.test_error_handling ___________________

self = <unit.test_bug_detector_agent.TestBugDetectorAgent testMethod=test_error_handling>

    def setUp(self):
        """Set up the test environment."""
        # Create a temporary directory for test files
        self.temp_dir = tempfile.mkdtemp()

        # Create the agent with a mock message bus
        self.message_bus = MagicMock()
>       self.agent = BugDetectorAgent(
            agent_id="test_bug_detector",
            message_bus=self.message_bus,
            max_bug_patterns=100,
            max_file_size=1024 * 1024  # 1 MB
        )

tests/unit/test_bug_detector_agent.py:28:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <triangulum_lx.agents.bug_detector_agent.BugDetectorAgent object at 0x7f62ef303920>
agent_id = 'test_bug_detector', message_bus = <MagicMock id='140062896434368'>
config = None, kwargs = {'max_bug_patterns': 100, 'max_file_size': 1048576}

    def __init__(
        self,
        agent_id: Optional[str] = None,
        # agent_type: str = "bug_detector", # Use AGENT_TYPE
        message_bus: Optional[EnhancedMessageBus] = None,
        # subscribed_message_types: Optional[List[MessageType]] = None, # Define in super
        config: Optional[Dict[str, Any]] = None,
        **kwargs # Added for BaseAgent params like engine_monitor
    ):
        """
        Initialize the Bug Detector Agent.

        Args:
            agent_id: Unique identifier for the agent (generated if not provided)
            message_bus: Message bus for agent communication
            config: Agent configuration dictionary. Expected to contain keys like:
                    'max_bug_patterns', 'max_file_size',
                    'relationship_analyst_agent_id' (optional),
                    'enable_context_aware_detection', 'enable_multi_pass_verification',
                    'false_positive_threshold', 'use_ast_parsing'.
        """
>       super().__init__(
            agent_id=agent_id,
            agent_type=self.AGENT_TYPE,
            message_bus=message_bus,
            subscribed_message_types=[MessageType.TASK_REQUEST, MessageType.QUERY], # Define directly
            config=config,
            **kwargs # Pass kwargs
        )
E       TypeError: BaseAgent.__init__() got an unexpected keyword argument 'max_bug_patterns'

triangulum_lx/agents/bug_detector_agent.py:235: TypeError
_________ TestBugDetectorAgent.test_error_response_in_message_handling _________

self = <unit.test_bug_detector_agent.TestBugDetectorAgent testMethod=test_error_response_in_message_handling>

    def setUp(self):
        """Set up the test environment."""
        # Create a temporary directory for test files
        self.temp_dir = tempfile.mkdtemp()

        # Create the agent with a mock message bus
        self.message_bus = MagicMock()
>       self.agent = BugDetectorAgent(
            agent_id="test_bug_detector",
            message_bus=self.message_bus,
            max_bug_patterns=100,
            max_file_size=1024 * 1024  # 1 MB
        )

tests/unit/test_bug_detector_agent.py:28:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <triangulum_lx.agents.bug_detector_agent.BugDetectorAgent object at 0x7f62ef301700>
agent_id = 'test_bug_detector', message_bus = <MagicMock id='140062896429712'>
config = None, kwargs = {'max_bug_patterns': 100, 'max_file_size': 1048576}

    def __init__(
        self,
        agent_id: Optional[str] = None,
        # agent_type: str = "bug_detector", # Use AGENT_TYPE
        message_bus: Optional[EnhancedMessageBus] = None,
        # subscribed_message_types: Optional[List[MessageType]] = None, # Define in super
        config: Optional[Dict[str, Any]] = None,
        **kwargs # Added for BaseAgent params like engine_monitor
    ):
        """
        Initialize the Bug Detector Agent.

        Args:
            agent_id: Unique identifier for the agent (generated if not provided)
            message_bus: Message bus for agent communication
            config: Agent configuration dictionary. Expected to contain keys like:
                    'max_bug_patterns', 'max_file_size',
                    'relationship_analyst_agent_id' (optional),
                    'enable_context_aware_detection', 'enable_multi_pass_verification',
                    'false_positive_threshold', 'use_ast_parsing'.
        """
>       super().__init__(
            agent_id=agent_id,
            agent_type=self.AGENT_TYPE,
            message_bus=message_bus,
            subscribed_message_types=[MessageType.TASK_REQUEST, MessageType.QUERY], # Define directly
            config=config,
            **kwargs # Pass kwargs
        )
E       TypeError: BaseAgent.__init__() got an unexpected keyword argument 'max_bug_patterns'

triangulum_lx/agents/bug_detector_agent.py:235: TypeError
_______________ TestBugDetectorAgent.test_extract_error_location _______________

self = <unit.test_bug_detector_agent.TestBugDetectorAgent testMethod=test_extract_error_location>

    def setUp(self):
        """Set up the test environment."""
        # Create a temporary directory for test files
        self.temp_dir = tempfile.mkdtemp()

        # Create the agent with a mock message bus
        self.message_bus = MagicMock()
>       self.agent = BugDetectorAgent(
            agent_id="test_bug_detector",
            message_bus=self.message_bus,
            max_bug_patterns=100,
            max_file_size=1024 * 1024  # 1 MB
        )

tests/unit/test_bug_detector_agent.py:28:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <triangulum_lx.agents.bug_detector_agent.BugDetectorAgent object at 0x7f62ef3c3dd0>
agent_id = 'test_bug_detector', message_bus = <MagicMock id='140062898437296'>
config = None, kwargs = {'max_bug_patterns': 100, 'max_file_size': 1048576}

    def __init__(
        self,
        agent_id: Optional[str] = None,
        # agent_type: str = "bug_detector", # Use AGENT_TYPE
        message_bus: Optional[EnhancedMessageBus] = None,
        # subscribed_message_types: Optional[List[MessageType]] = None, # Define in super
        config: Optional[Dict[str, Any]] = None,
        **kwargs # Added for BaseAgent params like engine_monitor
    ):
        """
        Initialize the Bug Detector Agent.

        Args:
            agent_id: Unique identifier for the agent (generated if not provided)
            message_bus: Message bus for agent communication
            config: Agent configuration dictionary. Expected to contain keys like:
                    'max_bug_patterns', 'max_file_size',
                    'relationship_analyst_agent_id' (optional),
                    'enable_context_aware_detection', 'enable_multi_pass_verification',
                    'false_positive_threshold', 'use_ast_parsing'.
        """
>       super().__init__(
            agent_id=agent_id,
            agent_type=self.AGENT_TYPE,
            message_bus=message_bus,
            subscribed_message_types=[MessageType.TASK_REQUEST, MessageType.QUERY], # Define directly
            config=config,
            **kwargs # Pass kwargs
        )
E       TypeError: BaseAgent.__init__() got an unexpected keyword argument 'max_bug_patterns'

triangulum_lx/agents/bug_detector_agent.py:235: TypeError
_________________ TestBugDetectorAgent.test_extract_error_type _________________

self = <unit.test_bug_detector_agent.TestBugDetectorAgent testMethod=test_extract_error_type>

    def setUp(self):
        """Set up the test environment."""
        # Create a temporary directory for test files
        self.temp_dir = tempfile.mkdtemp()

        # Create the agent with a mock message bus
        self.message_bus = MagicMock()
>       self.agent = BugDetectorAgent(
            agent_id="test_bug_detector",
            message_bus=self.message_bus,
            max_bug_patterns=100,
            max_file_size=1024 * 1024  # 1 MB
        )

tests/unit/test_bug_detector_agent.py:28:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <triangulum_lx.agents.bug_detector_agent.BugDetectorAgent object at 0x7f62ef32fa40>
agent_id = 'test_bug_detector', message_bus = <MagicMock id='140062896617376'>
config = None, kwargs = {'max_bug_patterns': 100, 'max_file_size': 1048576}

    def __init__(
        self,
        agent_id: Optional[str] = None,
        # agent_type: str = "bug_detector", # Use AGENT_TYPE
        message_bus: Optional[EnhancedMessageBus] = None,
        # subscribed_message_types: Optional[List[MessageType]] = None, # Define in super
        config: Optional[Dict[str, Any]] = None,
        **kwargs # Added for BaseAgent params like engine_monitor
    ):
        """
        Initialize the Bug Detector Agent.

        Args:
            agent_id: Unique identifier for the agent (generated if not provided)
            message_bus: Message bus for agent communication
            config: Agent configuration dictionary. Expected to contain keys like:
                    'max_bug_patterns', 'max_file_size',
                    'relationship_analyst_agent_id' (optional),
                    'enable_context_aware_detection', 'enable_multi_pass_verification',
                    'false_positive_threshold', 'use_ast_parsing'.
        """
>       super().__init__(
            agent_id=agent_id,
            agent_type=self.AGENT_TYPE,
            message_bus=message_bus,
            subscribed_message_types=[MessageType.TASK_REQUEST, MessageType.QUERY], # Define directly
            config=config,
            **kwargs # Pass kwargs
        )
E       TypeError: BaseAgent.__init__() got an unexpected keyword argument 'max_bug_patterns'

triangulum_lx/agents/bug_detector_agent.py:235: TypeError
___________ TestBugDetectorAgent.test_file_not_found_error_handling ____________

self = <unit.test_bug_detector_agent.TestBugDetectorAgent testMethod=test_file_not_found_error_handling>

    def setUp(self):
        """Set up the test environment."""
        # Create a temporary directory for test files
        self.temp_dir = tempfile.mkdtemp()

        # Create the agent with a mock message bus
        self.message_bus = MagicMock()
>       self.agent = BugDetectorAgent(
            agent_id="test_bug_detector",
            message_bus=self.message_bus,
            max_bug_patterns=100,
            max_file_size=1024 * 1024  # 1 MB
        )

tests/unit/test_bug_detector_agent.py:28:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <triangulum_lx.agents.bug_detector_agent.BugDetectorAgent object at 0x7f62ef37d0a0>
agent_id = 'test_bug_detector', message_bus = <MagicMock id='140062896615024'>
config = None, kwargs = {'max_bug_patterns': 100, 'max_file_size': 1048576}

    def __init__(
        self,
        agent_id: Optional[str] = None,
        # agent_type: str = "bug_detector", # Use AGENT_TYPE
        message_bus: Optional[EnhancedMessageBus] = None,
        # subscribed_message_types: Optional[List[MessageType]] = None, # Define in super
        config: Optional[Dict[str, Any]] = None,
        **kwargs # Added for BaseAgent params like engine_monitor
    ):
        """
        Initialize the Bug Detector Agent.

        Args:
            agent_id: Unique identifier for the agent (generated if not provided)
            message_bus: Message bus for agent communication
            config: Agent configuration dictionary. Expected to contain keys like:
                    'max_bug_patterns', 'max_file_size',
                    'relationship_analyst_agent_id' (optional),
                    'enable_context_aware_detection', 'enable_multi_pass_verification',
                    'false_positive_threshold', 'use_ast_parsing'.
        """
>       super().__init__(
            agent_id=agent_id,
            agent_type=self.AGENT_TYPE,
            message_bus=message_bus,
            subscribed_message_types=[MessageType.TASK_REQUEST, MessageType.QUERY], # Define directly
            config=config,
            **kwargs # Pass kwargs
        )
E       TypeError: BaseAgent.__init__() got an unexpected keyword argument 'max_bug_patterns'

triangulum_lx/agents/bug_detector_agent.py:235: TypeError
__________________ TestBugDetectorAgent.test_file_size_limit ___________________

self = <unit.test_bug_detector_agent.TestBugDetectorAgent testMethod=test_file_size_limit>

    def setUp(self):
        """Set up the test environment."""
        # Create a temporary directory for test files
        self.temp_dir = tempfile.mkdtemp()

        # Create the agent with a mock message bus
        self.message_bus = MagicMock()
>       self.agent = BugDetectorAgent(
            agent_id="test_bug_detector",
            message_bus=self.message_bus,
            max_bug_patterns=100,
            max_file_size=1024 * 1024  # 1 MB
        )

tests/unit/test_bug_detector_agent.py:28:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <triangulum_lx.agents.bug_detector_agent.BugDetectorAgent object at 0x7f62ef37d3d0>
agent_id = 'test_bug_detector', message_bus = <MagicMock id='140062896935984'>
config = None, kwargs = {'max_bug_patterns': 100, 'max_file_size': 1048576}

    def __init__(
        self,
        agent_id: Optional[str] = None,
        # agent_type: str = "bug_detector", # Use AGENT_TYPE
        message_bus: Optional[EnhancedMessageBus] = None,
        # subscribed_message_types: Optional[List[MessageType]] = None, # Define in super
        config: Optional[Dict[str, Any]] = None,
        **kwargs # Added for BaseAgent params like engine_monitor
    ):
        """
        Initialize the Bug Detector Agent.

        Args:
            agent_id: Unique identifier for the agent (generated if not provided)
            message_bus: Message bus for agent communication
            config: Agent configuration dictionary. Expected to contain keys like:
                    'max_bug_patterns', 'max_file_size',
                    'relationship_analyst_agent_id' (optional),
                    'enable_context_aware_detection', 'enable_multi_pass_verification',
                    'false_positive_threshold', 'use_ast_parsing'.
        """
>       super().__init__(
            agent_id=agent_id,
            agent_type=self.AGENT_TYPE,
            message_bus=message_bus,
            subscribed_message_types=[MessageType.TASK_REQUEST, MessageType.QUERY], # Define directly
            config=config,
            **kwargs # Pass kwargs
        )
E       TypeError: BaseAgent.__init__() got an unexpected keyword argument 'max_bug_patterns'

triangulum_lx/agents/bug_detector_agent.py:235: TypeError
___________ TestBugDetectorAgent.test_folder_analysis_error_handling ___________

self = <unit.test_bug_detector_agent.TestBugDetectorAgent testMethod=test_folder_analysis_error_handling>

    def setUp(self):
        """Set up the test environment."""
        # Create a temporary directory for test files
        self.temp_dir = tempfile.mkdtemp()

        # Create the agent with a mock message bus
        self.message_bus = MagicMock()
>       self.agent = BugDetectorAgent(
            agent_id="test_bug_detector",
            message_bus=self.message_bus,
            max_bug_patterns=100,
            max_file_size=1024 * 1024  # 1 MB
        )

tests/unit/test_bug_detector_agent.py:28:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <triangulum_lx.agents.bug_detector_agent.BugDetectorAgent object at 0x7f62ef37dca0>
agent_id = 'test_bug_detector', message_bus = <MagicMock id='140062896938096'>
config = None, kwargs = {'max_bug_patterns': 100, 'max_file_size': 1048576}

    def __init__(
        self,
        agent_id: Optional[str] = None,
        # agent_type: str = "bug_detector", # Use AGENT_TYPE
        message_bus: Optional[EnhancedMessageBus] = None,
        # subscribed_message_types: Optional[List[MessageType]] = None, # Define in super
        config: Optional[Dict[str, Any]] = None,
        **kwargs # Added for BaseAgent params like engine_monitor
    ):
        """
        Initialize the Bug Detector Agent.

        Args:
            agent_id: Unique identifier for the agent (generated if not provided)
            message_bus: Message bus for agent communication
            config: Agent configuration dictionary. Expected to contain keys like:
                    'max_bug_patterns', 'max_file_size',
                    'relationship_analyst_agent_id' (optional),
                    'enable_context_aware_detection', 'enable_multi_pass_verification',
                    'false_positive_threshold', 'use_ast_parsing'.
        """
>       super().__init__(
            agent_id=agent_id,
            agent_type=self.AGENT_TYPE,
            message_bus=message_bus,
            subscribed_message_types=[MessageType.TASK_REQUEST, MessageType.QUERY], # Define directly
            config=config,
            **kwargs # Pass kwargs
        )
E       TypeError: BaseAgent.__init__() got an unexpected keyword argument 'max_bug_patterns'

triangulum_lx/agents/bug_detector_agent.py:235: TypeError
___________ TestBugDetectorAgent.test_handle_query_get_bug_patterns ____________

self = <unit.test_bug_detector_agent.TestBugDetectorAgent testMethod=test_handle_query_get_bug_patterns>

    def setUp(self):
        """Set up the test environment."""
        # Create a temporary directory for test files
        self.temp_dir = tempfile.mkdtemp()

        # Create the agent with a mock message bus
        self.message_bus = MagicMock()
>       self.agent = BugDetectorAgent(
            agent_id="test_bug_detector",
            message_bus=self.message_bus,
            max_bug_patterns=100,
            max_file_size=1024 * 1024  # 1 MB
        )

tests/unit/test_bug_detector_agent.py:28:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <triangulum_lx.agents.bug_detector_agent.BugDetectorAgent object at 0x7f62efe48bc0>
agent_id = 'test_bug_detector', message_bus = <MagicMock id='140062896934736'>
config = None, kwargs = {'max_bug_patterns': 100, 'max_file_size': 1048576}

    def __init__(
        self,
        agent_id: Optional[str] = None,
        # agent_type: str = "bug_detector", # Use AGENT_TYPE
        message_bus: Optional[EnhancedMessageBus] = None,
        # subscribed_message_types: Optional[List[MessageType]] = None, # Define in super
        config: Optional[Dict[str, Any]] = None,
        **kwargs # Added for BaseAgent params like engine_monitor
    ):
        """
        Initialize the Bug Detector Agent.

        Args:
            agent_id: Unique identifier for the agent (generated if not provided)
            message_bus: Message bus for agent communication
            config: Agent configuration dictionary. Expected to contain keys like:
                    'max_bug_patterns', 'max_file_size',
                    'relationship_analyst_agent_id' (optional),
                    'enable_context_aware_detection', 'enable_multi_pass_verification',
                    'false_positive_threshold', 'use_ast_parsing'.
        """
>       super().__init__(
            agent_id=agent_id,
            agent_type=self.AGENT_TYPE,
            message_bus=message_bus,
            subscribed_message_types=[MessageType.TASK_REQUEST, MessageType.QUERY], # Define directly
            config=config,
            **kwargs # Pass kwargs
        )
E       TypeError: BaseAgent.__init__() got an unexpected keyword argument 'max_bug_patterns'

triangulum_lx/agents/bug_detector_agent.py:235: TypeError
__________ TestBugDetectorAgent.test_handle_task_request_detect_bugs ___________

self = <unit.test_bug_detector_agent.TestBugDetectorAgent testMethod=test_handle_task_request_detect_bugs>

    def setUp(self):
        """Set up the test environment."""
        # Create a temporary directory for test files
        self.temp_dir = tempfile.mkdtemp()

        # Create the agent with a mock message bus
        self.message_bus = MagicMock()
>       self.agent = BugDetectorAgent(
            agent_id="test_bug_detector",
            message_bus=self.message_bus,
            max_bug_patterns=100,
            max_file_size=1024 * 1024  # 1 MB
        )

tests/unit/test_bug_detector_agent.py:28:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <triangulum_lx.agents.bug_detector_agent.BugDetectorAgent object at 0x7f62ef3885f0>
agent_id = 'test_bug_detector', message_bus = <MagicMock id='140062896935024'>
config = None, kwargs = {'max_bug_patterns': 100, 'max_file_size': 1048576}

    def __init__(
        self,
        agent_id: Optional[str] = None,
        # agent_type: str = "bug_detector", # Use AGENT_TYPE
        message_bus: Optional[EnhancedMessageBus] = None,
        # subscribed_message_types: Optional[List[MessageType]] = None, # Define in super
        config: Optional[Dict[str, Any]] = None,
        **kwargs # Added for BaseAgent params like engine_monitor
    ):
        """
        Initialize the Bug Detector Agent.

        Args:
            agent_id: Unique identifier for the agent (generated if not provided)
            message_bus: Message bus for agent communication
            config: Agent configuration dictionary. Expected to contain keys like:
                    'max_bug_patterns', 'max_file_size',
                    'relationship_analyst_agent_id' (optional),
                    'enable_context_aware_detection', 'enable_multi_pass_verification',
                    'false_positive_threshold', 'use_ast_parsing'.
        """
>       super().__init__(
            agent_id=agent_id,
            agent_type=self.AGENT_TYPE,
            message_bus=message_bus,
            subscribed_message_types=[MessageType.TASK_REQUEST, MessageType.QUERY], # Define directly
            config=config,
            **kwargs # Pass kwargs
        )
E       TypeError: BaseAgent.__init__() got an unexpected keyword argument 'max_bug_patterns'

triangulum_lx/agents/bug_detector_agent.py:235: TypeError
______________ TestBugDetectorAgent.test_infer_language_from_path ______________

self = <unit.test_bug_detector_agent.TestBugDetectorAgent testMethod=test_infer_language_from_path>

    def setUp(self):
        """Set up the test environment."""
        # Create a temporary directory for test files
        self.temp_dir = tempfile.mkdtemp()

        # Create the agent with a mock message bus
        self.message_bus = MagicMock()
>       self.agent = BugDetectorAgent(
            agent_id="test_bug_detector",
            message_bus=self.message_bus,
            max_bug_patterns=100,
            max_file_size=1024 * 1024  # 1 MB
        )

tests/unit/test_bug_detector_agent.py:28:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <triangulum_lx.agents.bug_detector_agent.BugDetectorAgent object at 0x7f62ef388410>
agent_id = 'test_bug_detector', message_bus = <MagicMock id='140062896985184'>
config = None, kwargs = {'max_bug_patterns': 100, 'max_file_size': 1048576}

    def __init__(
        self,
        agent_id: Optional[str] = None,
        # agent_type: str = "bug_detector", # Use AGENT_TYPE
        message_bus: Optional[EnhancedMessageBus] = None,
        # subscribed_message_types: Optional[List[MessageType]] = None, # Define in super
        config: Optional[Dict[str, Any]] = None,
        **kwargs # Added for BaseAgent params like engine_monitor
    ):
        """
        Initialize the Bug Detector Agent.

        Args:
            agent_id: Unique identifier for the agent (generated if not provided)
            message_bus: Message bus for agent communication
            config: Agent configuration dictionary. Expected to contain keys like:
                    'max_bug_patterns', 'max_file_size',
                    'relationship_analyst_agent_id' (optional),
                    'enable_context_aware_detection', 'enable_multi_pass_verification',
                    'false_positive_threshold', 'use_ast_parsing'.
        """
>       super().__init__(
            agent_id=agent_id,
            agent_type=self.AGENT_TYPE,
            message_bus=message_bus,
            subscribed_message_types=[MessageType.TASK_REQUEST, MessageType.QUERY], # Define directly
            config=config,
            **kwargs # Pass kwargs
        )
E       TypeError: BaseAgent.__init__() got an unexpected keyword argument 'max_bug_patterns'

triangulum_lx/agents/bug_detector_agent.py:235: TypeError
________________ TestBugDetectorAgent.test_regex_error_handling ________________

self = <unit.test_bug_detector_agent.TestBugDetectorAgent testMethod=test_regex_error_handling>

    def setUp(self):
        """Set up the test environment."""
        # Create a temporary directory for test files
        self.temp_dir = tempfile.mkdtemp()

        # Create the agent with a mock message bus
        self.message_bus = MagicMock()
>       self.agent = BugDetectorAgent(
            agent_id="test_bug_detector",
            message_bus=self.message_bus,
            max_bug_patterns=100,
            max_file_size=1024 * 1024  # 1 MB
        )

tests/unit/test_bug_detector_agent.py:28:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <triangulum_lx.agents.bug_detector_agent.BugDetectorAgent object at 0x7f62ef38a2d0>
agent_id = 'test_bug_detector', message_bus = <MagicMock id='140062896992144'>
config = None, kwargs = {'max_bug_patterns': 100, 'max_file_size': 1048576}

    def __init__(
        self,
        agent_id: Optional[str] = None,
        # agent_type: str = "bug_detector", # Use AGENT_TYPE
        message_bus: Optional[EnhancedMessageBus] = None,
        # subscribed_message_types: Optional[List[MessageType]] = None, # Define in super
        config: Optional[Dict[str, Any]] = None,
        **kwargs # Added for BaseAgent params like engine_monitor
    ):
        """
        Initialize the Bug Detector Agent.

        Args:
            agent_id: Unique identifier for the agent (generated if not provided)
            message_bus: Message bus for agent communication
            config: Agent configuration dictionary. Expected to contain keys like:
                    'max_bug_patterns', 'max_file_size',
                    'relationship_analyst_agent_id' (optional),
                    'enable_context_aware_detection', 'enable_multi_pass_verification',
                    'false_positive_threshold', 'use_ast_parsing'.
        """
>       super().__init__(
            agent_id=agent_id,
            agent_type=self.AGENT_TYPE,
            message_bus=message_bus,
            subscribed_message_types=[MessageType.TASK_REQUEST, MessageType.QUERY], # Define directly
            config=config,
            **kwargs # Pass kwargs
        )
E       TypeError: BaseAgent.__init__() got an unexpected keyword argument 'max_bug_patterns'

triangulum_lx/agents/bug_detector_agent.py:235: TypeError
_____________ TestBugDetectorEnhancements.test_bug_classification ______________

self = <unit.test_bug_detector_enhancements.TestBugDetectorEnhancements testMethod=test_bug_classification>

    def setUp(self):
        """Set up test fixtures."""
        # Create a mock relationship analyst
        self.mock_relationship_analyst = MagicMock(spec=RelationshipAnalystAgent)
        self.mock_relationship_analyst.get_file_dependencies.return_value = {"dependent1.py", "dependent2.py"}
        self.mock_relationship_analyst.get_file_dependents.return_value = {"parent1.py", "parent2.py", "parent3.py"}
        self.mock_relationship_analyst.get_most_central_files.return_value = [("central1.py", 0.9), ("central2.py", 0.8)]

        # Create the bug detector with enhancements
>       self.bug_detector = BugDetectorAgent(
            agent_id="test_bug_detector",
            enable_context_aware_detection=True,
            enable_multi_pass_verification=True,
            false_positive_threshold=0.8,
            use_ast_parsing=True
        )

tests/unit/test_bug_detector_enhancements.py:39:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <triangulum_lx.agents.bug_detector_agent.BugDetectorAgent object at 0x7f62ef390b60>
agent_id = 'test_bug_detector', message_bus = None, config = None
kwargs = {'enable_context_aware_detection': True, 'enable_multi_pass_verification': True, 'false_positive_threshold': 0.8, 'use_ast_parsing': True}

    def __init__(
        self,
        agent_id: Optional[str] = None,
        # agent_type: str = "bug_detector", # Use AGENT_TYPE
        message_bus: Optional[EnhancedMessageBus] = None,
        # subscribed_message_types: Optional[List[MessageType]] = None, # Define in super
        config: Optional[Dict[str, Any]] = None,
        **kwargs # Added for BaseAgent params like engine_monitor
    ):
        """
        Initialize the Bug Detector Agent.

        Args:
            agent_id: Unique identifier for the agent (generated if not provided)
            message_bus: Message bus for agent communication
            config: Agent configuration dictionary. Expected to contain keys like:
                    'max_bug_patterns', 'max_file_size',
                    'relationship_analyst_agent_id' (optional),
                    'enable_context_aware_detection', 'enable_multi_pass_verification',
                    'false_positive_threshold', 'use_ast_parsing'.
        """
>       super().__init__(
            agent_id=agent_id,
            agent_type=self.AGENT_TYPE,
            message_bus=message_bus,
            subscribed_message_types=[MessageType.TASK_REQUEST, MessageType.QUERY], # Define directly
            config=config,
            **kwargs # Pass kwargs
        )
E       TypeError: BaseAgent.__init__() got an unexpected keyword argument 'enable_context_aware_detection'

triangulum_lx/agents/bug_detector_agent.py:235: TypeError
___________ TestBugDetectorEnhancements.test_context_aware_detection ___________

self = <unit.test_bug_detector_enhancements.TestBugDetectorEnhancements testMethod=test_context_aware_detection>

    def setUp(self):
        """Set up test fixtures."""
        # Create a mock relationship analyst
        self.mock_relationship_analyst = MagicMock(spec=RelationshipAnalystAgent)
        self.mock_relationship_analyst.get_file_dependencies.return_value = {"dependent1.py", "dependent2.py"}
        self.mock_relationship_analyst.get_file_dependents.return_value = {"parent1.py", "parent2.py", "parent3.py"}
        self.mock_relationship_analyst.get_most_central_files.return_value = [("central1.py", 0.9), ("central2.py", 0.8)]

        # Create the bug detector with enhancements
>       self.bug_detector = BugDetectorAgent(
            agent_id="test_bug_detector",
            enable_context_aware_detection=True,
            enable_multi_pass_verification=True,
            false_positive_threshold=0.8,
            use_ast_parsing=True
        )

tests/unit/test_bug_detector_enhancements.py:39:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <triangulum_lx.agents.bug_detector_agent.BugDetectorAgent object at 0x7f62ef380f20>
agent_id = 'test_bug_detector', message_bus = None, config = None
kwargs = {'enable_context_aware_detection': True, 'enable_multi_pass_verification': True, 'false_positive_threshold': 0.8, 'use_ast_parsing': True}

    def __init__(
        self,
        agent_id: Optional[str] = None,
        # agent_type: str = "bug_detector", # Use AGENT_TYPE
        message_bus: Optional[EnhancedMessageBus] = None,
        # subscribed_message_types: Optional[List[MessageType]] = None, # Define in super
        config: Optional[Dict[str, Any]] = None,
        **kwargs # Added for BaseAgent params like engine_monitor
    ):
        """
        Initialize the Bug Detector Agent.

        Args:
            agent_id: Unique identifier for the agent (generated if not provided)
            message_bus: Message bus for agent communication
            config: Agent configuration dictionary. Expected to contain keys like:
                    'max_bug_patterns', 'max_file_size',
                    'relationship_analyst_agent_id' (optional),
                    'enable_context_aware_detection', 'enable_multi_pass_verification',
                    'false_positive_threshold', 'use_ast_parsing'.
        """
>       super().__init__(
            agent_id=agent_id,
            agent_type=self.AGENT_TYPE,
            message_bus=message_bus,
            subscribed_message_types=[MessageType.TASK_REQUEST, MessageType.QUERY], # Define directly
            config=config,
            **kwargs # Pass kwargs
        )
E       TypeError: BaseAgent.__init__() got an unexpected keyword argument 'enable_context_aware_detection'

triangulum_lx/agents/bug_detector_agent.py:235: TypeError
__________ TestBugDetectorEnhancements.test_false_positive_reduction ___________

self = <unit.test_bug_detector_enhancements.TestBugDetectorEnhancements testMethod=test_false_positive_reduction>

    def setUp(self):
        """Set up test fixtures."""
        # Create a mock relationship analyst
        self.mock_relationship_analyst = MagicMock(spec=RelationshipAnalystAgent)
        self.mock_relationship_analyst.get_file_dependencies.return_value = {"dependent1.py", "dependent2.py"}
        self.mock_relationship_analyst.get_file_dependents.return_value = {"parent1.py", "parent2.py", "parent3.py"}
        self.mock_relationship_analyst.get_most_central_files.return_value = [("central1.py", 0.9), ("central2.py", 0.8)]

        # Create the bug detector with enhancements
>       self.bug_detector = BugDetectorAgent(
            agent_id="test_bug_detector",
            enable_context_aware_detection=True,
            enable_multi_pass_verification=True,
            false_positive_threshold=0.8,
            use_ast_parsing=True
        )

tests/unit/test_bug_detector_enhancements.py:39:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <triangulum_lx.agents.bug_detector_agent.BugDetectorAgent object at 0x7f62ef39bc80>
agent_id = 'test_bug_detector', message_bus = None, config = None
kwargs = {'enable_context_aware_detection': True, 'enable_multi_pass_verification': True, 'false_positive_threshold': 0.8, 'use_ast_parsing': True}

    def __init__(
        self,
        agent_id: Optional[str] = None,
        # agent_type: str = "bug_detector", # Use AGENT_TYPE
        message_bus: Optional[EnhancedMessageBus] = None,
        # subscribed_message_types: Optional[List[MessageType]] = None, # Define in super
        config: Optional[Dict[str, Any]] = None,
        **kwargs # Added for BaseAgent params like engine_monitor
    ):
        """
        Initialize the Bug Detector Agent.

        Args:
            agent_id: Unique identifier for the agent (generated if not provided)
            message_bus: Message bus for agent communication
            config: Agent configuration dictionary. Expected to contain keys like:
                    'max_bug_patterns', 'max_file_size',
                    'relationship_analyst_agent_id' (optional),
                    'enable_context_aware_detection', 'enable_multi_pass_verification',
                    'false_positive_threshold', 'use_ast_parsing'.
        """
>       super().__init__(
            agent_id=agent_id,
            agent_type=self.AGENT_TYPE,
            message_bus=message_bus,
            subscribed_message_types=[MessageType.TASK_REQUEST, MessageType.QUERY], # Define directly
            config=config,
            **kwargs # Pass kwargs
        )
E       TypeError: BaseAgent.__init__() got an unexpected keyword argument 'enable_context_aware_detection'

triangulum_lx/agents/bug_detector_agent.py:235: TypeError
_________ TestBugDetectorEnhancements.test_folder_analysis_performance _________

self = <unit.test_bug_detector_enhancements.TestBugDetectorEnhancements testMethod=test_folder_analysis_performance>

    def setUp(self):
        """Set up test fixtures."""
        # Create a mock relationship analyst
        self.mock_relationship_analyst = MagicMock(spec=RelationshipAnalystAgent)
        self.mock_relationship_analyst.get_file_dependencies.return_value = {"dependent1.py", "dependent2.py"}
        self.mock_relationship_analyst.get_file_dependents.return_value = {"parent1.py", "parent2.py", "parent3.py"}
        self.mock_relationship_analyst.get_most_central_files.return_value = [("central1.py", 0.9), ("central2.py", 0.8)]

        # Create the bug detector with enhancements
>       self.bug_detector = BugDetectorAgent(
            agent_id="test_bug_detector",
            enable_context_aware_detection=True,
            enable_multi_pass_verification=True,
            false_positive_threshold=0.8,
            use_ast_parsing=True
        )

tests/unit/test_bug_detector_enhancements.py:39:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <triangulum_lx.agents.bug_detector_agent.BugDetectorAgent object at 0x7f62ef3999a0>
agent_id = 'test_bug_detector', message_bus = None, config = None
kwargs = {'enable_context_aware_detection': True, 'enable_multi_pass_verification': True, 'false_positive_threshold': 0.8, 'use_ast_parsing': True}

    def __init__(
        self,
        agent_id: Optional[str] = None,
        # agent_type: str = "bug_detector", # Use AGENT_TYPE
        message_bus: Optional[EnhancedMessageBus] = None,
        # subscribed_message_types: Optional[List[MessageType]] = None, # Define in super
        config: Optional[Dict[str, Any]] = None,
        **kwargs # Added for BaseAgent params like engine_monitor
    ):
        """
        Initialize the Bug Detector Agent.

        Args:
            agent_id: Unique identifier for the agent (generated if not provided)
            message_bus: Message bus for agent communication
            config: Agent configuration dictionary. Expected to contain keys like:
                    'max_bug_patterns', 'max_file_size',
                    'relationship_analyst_agent_id' (optional),
                    'enable_context_aware_detection', 'enable_multi_pass_verification',
                    'false_positive_threshold', 'use_ast_parsing'.
        """
>       super().__init__(
            agent_id=agent_id,
            agent_type=self.AGENT_TYPE,
            message_bus=message_bus,
            subscribed_message_types=[MessageType.TASK_REQUEST, MessageType.QUERY], # Define directly
            config=config,
            **kwargs # Pass kwargs
        )
E       TypeError: BaseAgent.__init__() got an unexpected keyword argument 'enable_context_aware_detection'

triangulum_lx/agents/bug_detector_agent.py:235: TypeError
__________ TestBugDetectorEnhancements.test_relationship_integration ___________

self = <unit.test_bug_detector_enhancements.TestBugDetectorEnhancements testMethod=test_relationship_integration>

    def setUp(self):
        """Set up test fixtures."""
        # Create a mock relationship analyst
        self.mock_relationship_analyst = MagicMock(spec=RelationshipAnalystAgent)
        self.mock_relationship_analyst.get_file_dependencies.return_value = {"dependent1.py", "dependent2.py"}
        self.mock_relationship_analyst.get_file_dependents.return_value = {"parent1.py", "parent2.py", "parent3.py"}
        self.mock_relationship_analyst.get_most_central_files.return_value = [("central1.py", 0.9), ("central2.py", 0.8)]

        # Create the bug detector with enhancements
>       self.bug_detector = BugDetectorAgent(
            agent_id="test_bug_detector",
            enable_context_aware_detection=True,
            enable_multi_pass_verification=True,
            false_positive_threshold=0.8,
            use_ast_parsing=True
        )

tests/unit/test_bug_detector_enhancements.py:39:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <triangulum_lx.agents.bug_detector_agent.BugDetectorAgent object at 0x7f62ef3cdd30>
agent_id = 'test_bug_detector', message_bus = None, config = None
kwargs = {'enable_context_aware_detection': True, 'enable_multi_pass_verification': True, 'false_positive_threshold': 0.8, 'use_ast_parsing': True}

    def __init__(
        self,
        agent_id: Optional[str] = None,
        # agent_type: str = "bug_detector", # Use AGENT_TYPE
        message_bus: Optional[EnhancedMessageBus] = None,
        # subscribed_message_types: Optional[List[MessageType]] = None, # Define in super
        config: Optional[Dict[str, Any]] = None,
        **kwargs # Added for BaseAgent params like engine_monitor
    ):
        """
        Initialize the Bug Detector Agent.

        Args:
            agent_id: Unique identifier for the agent (generated if not provided)
            message_bus: Message bus for agent communication
            config: Agent configuration dictionary. Expected to contain keys like:
                    'max_bug_patterns', 'max_file_size',
                    'relationship_analyst_agent_id' (optional),
                    'enable_context_aware_detection', 'enable_multi_pass_verification',
                    'false_positive_threshold', 'use_ast_parsing'.
        """
>       super().__init__(
            agent_id=agent_id,
            agent_type=self.AGENT_TYPE,
            message_bus=message_bus,
            subscribed_message_types=[MessageType.TASK_REQUEST, MessageType.QUERY], # Define directly
            config=config,
            **kwargs # Pass kwargs
        )
E       TypeError: BaseAgent.__init__() got an unexpected keyword argument 'enable_context_aware_detection'

triangulum_lx/agents/bug_detector_agent.py:235: TypeError
_________________ TestEnhancedMessageBus.test_circuit_breaker __________________

self = <unit.test_enhanced_message_bus.TestEnhancedMessageBus testMethod=test_circuit_breaker>

    def test_circuit_breaker(self):
        """Test the circuit breaker pattern for failure isolation."""
        # Create a callback that raises an exception
        def failing_callback(message):
            raise RuntimeError("Simulated failure")

        # Subscribe to messages with the failing callback
        self.message_bus.subscribe(
            agent_id="failing_agent",
            callback=failing_callback,
            message_types=[MessageType.STATUS],
            max_retries=1  # Only retry once
        )

        # Get the circuit breaker for the agent
        circuit_breaker = self.message_bus._circuit_breakers.get("failing_agent")
        self.assertIsNotNone(circuit_breaker)

        # Initially, the circuit should be closed
        self.assertEqual(circuit_breaker.state, CircuitState.CLOSED)

        # Publish messages until the circuit opens
        for _ in range(10):  # Should be enough to trigger the circuit breaker
            response = self.test_message.create_response(
                message_type=MessageType.STATUS,
                content={"status": "test"}
            )
            response.receiver = "failing_agent"
            self.message_bus.publish(response)

        # Check that the circuit is now open
        self.assertEqual(circuit_breaker.state, CircuitState.OPEN)

        # Get performance metrics
        metrics = self.message_bus.get_performance_metrics()

        # Check that circuit breaker trips were recorded
>       self.assertGreater(metrics.circuit_breaker_trips, 0)
E       AssertionError: 0 not greater than 0

tests/unit/test_enhanced_message_bus.py:317: AssertionError
------------------------------ Captured log call -------------------------------
ERROR    triangulum_lx.agents.enhanced_message_bus:enhanced_message_bus.py:667 Error delivering message to failing_agent: Simulated failure
ERROR    triangulum_lx.agents.enhanced_message_bus:enhanced_message_bus.py:667 Error delivering message to failing_agent: Simulated failure
ERROR    triangulum_lx.agents.enhanced_message_bus:enhanced_message_bus.py:667 Error delivering message to failing_agent: Simulated failure
WARNING  triangulum_lx.agents.enhanced_message_bus:enhanced_message_bus.py:171 Circuit breaker opened after 5 consecutive failures
ERROR    triangulum_lx.agents.enhanced_message_bus:enhanced_message_bus.py:667 Error delivering message to failing_agent: Simulated failure
ERROR    triangulum_lx.agents.enhanced_message_bus:enhanced_message_bus.py:667 Error delivering message to failing_agent: Simulated failure
ERROR    triangulum_lx.agents.enhanced_message_bus:enhanced_message_bus.py:667 Error delivering message to failing_agent: Simulated failure
ERROR    triangulum_lx.agents.enhanced_message_bus:enhanced_message_bus.py:667 Error delivering message to failing_agent: Simulated failure
ERROR    triangulum_lx.agents.enhanced_message_bus:enhanced_message_bus.py:667 Error delivering message to failing_agent: Simulated failure
ERROR    triangulum_lx.agents.enhanced_message_bus:enhanced_message_bus.py:667 Error delivering message to failing_agent: Simulated failure
ERROR    triangulum_lx.agents.enhanced_message_bus:enhanced_message_bus.py:667 Error delivering message to failing_agent: Simulated failure
ERROR    triangulum_lx.agents.enhanced_message_bus:enhanced_message_bus.py:667 Error delivering message to failing_agent: Simulated failure
ERROR    triangulum_lx.agents.enhanced_message_bus:enhanced_message_bus.py:667 Error delivering message to failing_agent: Simulated failure
ERROR    triangulum_lx.agents.enhanced_message_bus:enhanced_message_bus.py:667 Error delivering message to failing_agent: Simulated failure
ERROR    triangulum_lx.agents.enhanced_message_bus:enhanced_message_bus.py:667 Error delivering message to failing_agent: Simulated failure
ERROR    triangulum_lx.agents.enhanced_message_bus:enhanced_message_bus.py:667 Error delivering message to failing_agent: Simulated failure
ERROR    triangulum_lx.agents.enhanced_message_bus:enhanced_message_bus.py:667 Error delivering message to failing_agent: Simulated failure
ERROR    triangulum_lx.agents.enhanced_message_bus:enhanced_message_bus.py:667 Error delivering message to failing_agent: Simulated failure
ERROR    triangulum_lx.agents.enhanced_message_bus:enhanced_message_bus.py:667 Error delivering message to failing_agent: Simulated failure
ERROR    triangulum_lx.agents.enhanced_message_bus:enhanced_message_bus.py:667 Error delivering message to failing_agent: Simulated failure
ERROR    triangulum_lx.agents.enhanced_message_bus:enhanced_message_bus.py:667 Error delivering message to failing_agent: Simulated failure
_____________ TestEnhancedMessageBus.test_delivery_status_tracking _____________

self = <unit.test_enhanced_message_bus.TestEnhancedMessageBus testMethod=test_delivery_status_tracking>

    def test_delivery_status_tracking(self):
        """Test delivery status tracking."""
        # Subscribe to messages
        self.message_bus.subscribe(
            agent_id="test_agent",
            callback=self.mock_callback,
            message_types=[MessageType.STATUS]
        )

        # Publish a message
        self.message_bus.publish(self.test_message)

        # Get delivery status
        delivery_status = self.message_bus.get_delivery_status(self.test_message.message_id)

        # Check that delivery status was recorded
>       self.assertIn("test_agent", delivery_status)
E       AssertionError: 'test_agent' not found in {'test_receiver': DeliveryStatus(success=False, timestamp=1752444537.2821174, error='No matching subscription', retry_count=0)}

tests/unit/test_enhanced_message_bus.py:516: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  triangulum_lx.agents.enhanced_message_bus:enhanced_message_bus.py:502 No subscription found for agent test_receiver, message type MessageType.STATUS
______________ TestEnhancedMessageBus.test_large_message_handling ______________

self = <unit.test_enhanced_message_bus.TestEnhancedMessageBus testMethod=test_large_message_handling>

    def test_large_message_handling(self):
        """Test handling of large messages with chunking."""
        # Subscribe to messages
        self.message_bus.subscribe(
            agent_id="test_agent",
            callback=self.mock_callback,
            message_types=[MessageType.CHUNKED_MESSAGE]
        )

        # Create a large message
        large_content = {"data": "x" * 1000000}  # 1MB of data
        large_message = AgentMessage(
            message_type=MessageType.TASK_REQUEST,
            content=large_content,
            sender="test_sender",
            receiver="test_agent"
        )

        # Publish the large message
        with patch.object(self.message_bus, '_is_large_message', return_value=True):
            result = self.message_bus.publish(large_message)

        # Check that the callback was called for each chunk
>       self.assertGreater(self.mock_callback.call_count, 1)
E       AssertionError: 0 not greater than 1

tests/unit/test_enhanced_message_bus.py:374: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  triangulum_lx.agents.enhanced_message_bus:enhanced_message_bus.py:502 No subscription found for agent test_agent, message type MessageType.TASK_REQUEST
______________ TestEnhancedMessageBus.test_message_deduplication _______________

self = <unit.test_enhanced_message_bus.TestEnhancedMessageBus testMethod=test_message_deduplication>

    def test_message_deduplication(self):
        """Test message deduplication to prevent processing duplicates."""
        # Subscribe to messages
        self.message_bus.subscribe(
            agent_id="test_agent",
            callback=self.mock_callback,
            message_types=[MessageType.STATUS]
        )

        # Publish the same message twice
        self.message_bus.publish(self.test_message)
        self.message_bus.publish(self.test_message)  # Duplicate

        # Check that the callback was called only once
>       self.assertEqual(self.mock_callback.call_count, 1)
E       AssertionError: 0 != 1

tests/unit/test_enhanced_message_bus.py:401: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  triangulum_lx.agents.enhanced_message_bus:enhanced_message_bus.py:502 No subscription found for agent test_receiver, message type MessageType.STATUS
WARNING  triangulum_lx.agents.enhanced_message_bus:enhanced_message_bus.py:398 Duplicate message detected: ccb65bbb-7126-42b7-a16f-66979b882e75
_______________ TestEnhancedMessageBus.test_performance_metrics ________________

self = <unit.test_enhanced_message_bus.TestEnhancedMessageBus testMethod=test_performance_metrics>

    def test_performance_metrics(self):
        """Test performance metrics tracking."""
        # Subscribe to messages
        self.message_bus.subscribe(
            agent_id="test_agent",
            callback=self.mock_callback,
            message_types=[MessageType.STATUS]
        )

        # Publish a message
        self.message_bus.publish(self.test_message)

        # Get performance metrics
        metrics = self.message_bus.get_performance_metrics()

        # Check that metrics were recorded
        self.assertEqual(metrics.total_messages, 1)
>       self.assertEqual(metrics.successful_deliveries, 1)
E       AssertionError: 0 != 1

tests/unit/test_enhanced_message_bus.py:491: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  triangulum_lx.agents.enhanced_message_bus:enhanced_message_bus.py:502 No subscription found for agent test_receiver, message type MessageType.STATUS
______________ TestEnhancedMessageBus.test_subscribe_and_publish _______________

self = <MagicMock id='140062886440512'>

    def assert_called_once(self):
        """assert that the mock was called only once.
        """
        if not self.call_count == 1:
            msg = ("Expected '%s' to have been called once. Called %s times.%s"
                   % (self._mock_name or 'mock',
                      self.call_count,
                      self._calls_repr()))
>           raise AssertionError(msg)
E           AssertionError: Expected 'mock' to have been called once. Called 0 times.

/home/jules/.pyenv/versions/3.12.11/lib/python3.12/unittest/mock.py:928: AssertionError

During handling of the above exception, another exception occurred:

self = <unit.test_enhanced_message_bus.TestEnhancedMessageBus testMethod=test_subscribe_and_publish>

    def test_subscribe_and_publish(self):
        """Test basic subscription and publishing."""
        # Subscribe to messages
        self.message_bus.subscribe(
            agent_id="test_agent",
            callback=self.mock_callback,
            message_types=[MessageType.STATUS]
        )

        # Publish a message
        result = self.message_bus.publish(self.test_message)

        # Check that the callback was called
>       self.mock_callback.assert_called_once()
E       AssertionError: Expected 'mock' to have been called once. Called 0 times.

tests/unit/test_enhanced_message_bus.py:62: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  triangulum_lx.agents.enhanced_message_bus:enhanced_message_bus.py:502 No subscription found for agent test_receiver, message type MessageType.STATUS
____________ TestEnhancedMessageBus.test_thought_chain_integration _____________

self = <unit.test_enhanced_message_bus.TestEnhancedMessageBus testMethod=test_thought_chain_integration>

    def test_thought_chain_integration(self):
        """Test integration with thought chains."""
        # Create a thought chain manager
        thought_chain_manager = ThoughtChainManager()

        # Create a message bus with thought chain integration
        message_bus_with_tc = EnhancedMessageBus(thought_chain_manager=thought_chain_manager)

        # Subscribe to messages
        message_bus_with_tc.subscribe(
            agent_id="test_agent",
            callback=self.mock_callback,
            message_types=[MessageType.STATUS]
        )

        # Publish a message
>       message_bus_with_tc.publish(self.test_message)

tests/unit/test_enhanced_message_bus.py:465:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
triangulum_lx/agents/enhanced_message_bus.py:413: in publish
    self._integrate_with_thought_chains(message)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <triangulum_lx.agents.enhanced_message_bus.EnhancedMessageBus object at 0x7f62ee998200>
message = AgentMessage(message_type=<MessageType.STATUS: 'status'>, content={'status': 'test'}, sender='test_sender', message_id...chunk_sequence=None, response_id=None, compressed=False, problem_context={}, analysis_results={}, suggested_actions=[])

    def _integrate_with_thought_chains(self, message: AgentMessage) -> None:
        """
        Integrate a message with thought chains.

        This method adds the message to the appropriate thought chain if available,
        or creates a new thought chain if needed.

        Args:
            message: Message to integrate
        """
        if not self._thought_chain_manager:
            return

        conversation_id = message.conversation_id

        # Check if we have a thought chain for this conversation
        if conversation_id not in self._thought_chains:
            # Create a new thought chain
            chain = self._thought_chain_manager.create_chain(
                name=f"Conversation {conversation_id}",
                metadata={"conversation_id": conversation_id}
            )
            self._thought_chains[conversation_id] = chain

        # Get the thought chain
        chain = self._thought_chains.get(conversation_id)

        # Add the message to the thought chain
        if chain:
>           chain.add_node(
            ^^^^^^^^^^^^^^
                ChainNode(
                    thought_type=ThoughtType.OBSERVATION,
                    content=message.to_dict(),
                    author_agent_id=message.sender,
                    metadata={
                        "message_id": message.message_id,
                        "message_type": message.message_type.value,
                        "receiver": message.receiver,
                        "timestamp": message.timestamp
                    }
                )
            )
E           AttributeError: 'str' object has no attribute 'add_node'

triangulum_lx/agents/enhanced_message_bus.py:787: AttributeError
_________________ TestEnhancedMessageBus.test_timeout_handling _________________

self = <unit.test_enhanced_message_bus.TestEnhancedMessageBus testMethod=test_timeout_handling>

    def test_timeout_handling(self):
        """Test timeout handling for message delivery."""
        # Create a callback that sleeps longer than the timeout
        def slow_callback(message):
            time.sleep(0.2)  # Sleep for 200ms

        # Subscribe to messages with the slow callback and a short timeout
        self.message_bus.subscribe(
            agent_id="slow_agent",
            callback=slow_callback,
            message_types=[MessageType.STATUS],
            timeout=0.1  # 100ms timeout
        )

        # Publish a message
        response = self.test_message.create_response(
            message_type=MessageType.STATUS,
            content={"status": "test"}
        )
        response.receiver = "slow_agent"
        result = self.message_bus.publish(response)

        # Check that the delivery failed due to timeout
>       self.assertFalse(result["delivery_status"]["slow_agent"]["success"])
E       AssertionError: True is not false

tests/unit/test_enhanced_message_bus.py:342: AssertionError
_________________ TestFeedbackCollector.test_analyze_feedback __________________

self = <unit.test_feedback_collector.TestFeedbackCollector testMethod=test_analyze_feedback>

    def test_analyze_feedback(self):
        """Test analyzing feedback."""
        # Record multiple feedback entries
        self.collector.record_feedback(
            content="Bug in login",
            feedback_type="bug",
            rating=2,
            tags=["login", "critical"]
        )

        self.collector.record_feedback(
            content="Feature request: Dark mode",
            feedback_type="feature",
            rating=4,
            tags=["ui", "dark-mode"]
        )

        self.collector.record_feedback(
            content="Another bug in login",
            feedback_type="bug",
            rating=3,
            tags=["login", "medium"]
        )

        # Analyze all feedback
        analysis = self.collector.analyze_feedback()

        # Check the analysis results
        self.assertEqual(analysis['total_count'], 3)
        self.assertEqual(len(analysis['by_type']), 2)
        self.assertEqual(analysis['by_type']['bug'], 2)
        self.assertEqual(analysis['by_type']['feature'], 1)
        self.assertIsNotNone(analysis['average_rating'])
        self.assertEqual(analysis['processed_count'], 0)
        self.assertEqual(analysis['unprocessed_count'], 3)
>       self.assertEqual(len(analysis['common_tags']), 4)
E       AssertionError: 5 != 4

tests/unit/test_feedback_collector.py:254: AssertionError
_______________ TestFeedbackCollector.test_export_feedback_json ________________

self = <unit.test_feedback_collector.TestFeedbackCollector testMethod=test_export_feedback_json>
mock_file = <MagicMock name='open' id='140062886432976'>

    @patch('builtins.open', new_callable=mock_open)
    def test_export_feedback_json(self, mock_file):
        """Test exporting feedback to JSON."""
        # Record feedback
        self.collector.record_feedback(
            content="Test feedback",
            feedback_type="bug"
        )

        # Export to JSON
        success = self.collector.export_feedback("test.json", format="json")

        # Check that the export was successful
        self.assertTrue(success)

        # Check that the file was opened for writing
        mock_file.assert_called_once_with("test.json", "w")

        # Check that json.dump was called with the feedback data
        handle = mock_file()
>       self.assertEqual(handle.write.call_count, 1)
E       AssertionError: 42 != 1

tests/unit/test_feedback_collector.py:285: AssertionError
______________________________ test_fsync_mocked _______________________________

mocker = <pytest_mock.plugin.MockerFixture object at 0x7f62ed50adb0>

    def test_fsync_mocked(mocker):
        """Test that fsync is called by atomic_write."""
        mock_os_fsync = mocker.patch("os.fsync")
        # If using libc directly: mock_libc_fsync = mocker.patch("triangulum_lx.tooling.fs_ops.c_fsync")

        test_file = BASE_TEST_DIR / "test_fsync.txt"
        data = b"fsync test"

        # Test with fallback (tempfile + rename)
        fs_ops.atomic_write(str(test_file), data, use_otmpfile_if_available=False)
        mock_os_fsync.assert_called() # Should be called on the temp file descriptor
        # If also testing O_TMPFILE path, would need to ensure it's called there too.
        # This is tricky because O_TMPFILE path might not be taken.
        # For now, testing fsync on fallback is sufficient to show integration.

        # Reset mock for another call if testing O_TMPFILE path separately
        mock_os_fsync.reset_mock()
>       if fs_ops.os.name == 'posix' and hasattr(fs_ops.os, 'O_TMPFILE') and hasattr(fs_ops.os, 'linkat'):
           ^^^^^^^^^
E       AttributeError: module 'triangulum_lx.tooling.fs_ops' has no attribute 'os'

tests/unit/test_fs_ops.py:289: AttributeError
_________ TestOrchestratorAgent.test_orchestrate_file_healing_with_bug _________

self = <unit.test_orchestrator_agent.TestOrchestratorAgent testMethod=test_orchestrate_file_healing_with_bug>

    def test_orchestrate_file_healing_with_bug(self):
        """Test orchestrating file healing with a bug."""
        # Set up mock responses
        bug_detection_result = {
            "status": "success",
            "bugs": [{"pattern_id": "null_pointer", "line": 2, "severity": "high"}]
        }
        relationship_result = {
            "status": "success",
            "relationships": {}
        }
        strategy_result = {
            "status": "success",
            "strategy": {"name": "add_null_check", "approach": "defensive"}
        }
        implementation_result = {
            "status": "success",
            "implementation": {"patches": [{"file_path": self.temp_file.name}]}
        }
        verification_result = {
            "status": "success",
            "verification_result": {"overall_success": True}
        }

        # Mock the _execute_workflow_step method to return different results based on agent_type
        def mock_execute_workflow_step(workflow_id, agent_type, workflow_state):
            if agent_type == "bug_detector":
                return bug_detection_result
            elif agent_type == "relationship_analyst":
                return relationship_result
            elif agent_type == "strategy":
                return strategy_result
            elif agent_type == "implementation":
                return implementation_result
            elif agent_type == "verification":
                return verification_result
            return {"status": "failed"}

        # Replace the _execute_workflow_step method
        self.orchestrator._execute_workflow_step = mock_execute_workflow_step

        # Orchestrate file healing
        result = self.orchestrator.orchestrate_file_healing(self.temp_file.name)

        # Check the result
>       self.assertEqual(result["status"], "completed")
E       AssertionError: 'failed' != 'completed'
E       - failed
E       + completed

tests/unit/test_orchestrator_agent.py:256: AssertionError
------------------------------ Captured log call -------------------------------
ERROR    triangulum_lx.agents.orchestrator_agent:orchestrator_agent.py:1311 Error orchestrating file healing: argument of type 'NoneType' is not iterable
______________ TestPriorityAnalyzerAgent.test_analyze_priorities _______________

self = <unit.test_priority_analyzer_agent.TestPriorityAnalyzerAgent testMethod=test_analyze_priorities>

    def test_analyze_priorities(self):
        bugs_by_file = {
            "file1.py": [{"severity": "high"}, {"severity": "low"}],
            "file2.py": [{"severity": "critical"}],
        }
        relationships = {
            "file1.py": {"dependencies": ["file2.py"], "dependents": []},
            "file2.py": {"dependencies": [], "dependents": ["file1.py"]},
        }

        priorities = self.agent.analyze_priorities("dummy_path", bugs_by_file, relationships)

        self.assertIn("file1.py", priorities)
        self.assertIn("file2.py", priorities)
>       self.assertGreater(priorities["file1.py"]["priority"], priorities["file2.py"]["priority"])
E       AssertionError: 0.6494303829603245 not greater than 0.6605

tests/unit/test_priority_analyzer_agent.py:29: AssertionError
______________ TestRelationshipAnalystAgent.test_analyze_codebase ______________

self = <unit.test_relationship_analyst_agent.TestRelationshipAnalystAgent testMethod=test_analyze_codebase>

    def setUp(self):
        """Set up the test environment."""
        # Create a temporary directory for the test files
        self.temp_dir = tempfile.mkdtemp()

        # Create the agent with a mock message bus
        self.message_bus = MagicMock()
>       self.agent = RelationshipAnalystAgent(
            agent_id="test_analyst",
            agent_type="relationship_analyst",
            message_bus=self.message_bus,
            max_workers=1,
            cache_dir=None
        )

tests/unit/test_relationship_analyst_agent.py:31:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <triangulum_lx.agents.relationship_analyst_agent.RelationshipAnalystAgent object at 0x7f62ed509b80>
agent_id = 'test_analyst', message_bus = <MagicMock id='140062865963200'>
config = None
kwargs = {'agent_type': 'relationship_analyst', 'cache_dir': None, 'max_workers': 1}

    def __init__(self,
                 agent_id: Optional[str] = None, # Made Optional for factory
                 message_bus: Optional[EnhancedMessageBus] = None,
                 config: Optional[Dict[str, Any]] = None,
                 **kwargs):
        """
        Initialize the RelationshipAnalystAgent.

        Args:
            agent_id: Unique identifier for the agent.
            message_bus: EnhancedMessageBus for communication.
            config: Agent configuration dictionary. Expected keys:
                    'name' (optional, defaults to agent_id),
                    'cache_dir' (optional),
                    'visualization_dir' (optional, defaults to cache_dir/visualizations).
        """
>       super().__init__(
            agent_id=agent_id,
            agent_type=self.AGENT_TYPE,
            message_bus=message_bus,
            config=config,
            subscribed_message_types=[MessageType.TASK_REQUEST, MessageType.QUERY],
            **kwargs
        )
E       TypeError: triangulum_lx.agents.base_agent.BaseAgent.__init__() got multiple values for keyword argument 'agent_type'

triangulum_lx/agents/relationship_analyst_agent.py:54: TypeError
_______________ TestRelationshipAnalystAgent.test_error_handling _______________

self = <unit.test_relationship_analyst_agent.TestRelationshipAnalystAgent testMethod=test_error_handling>

    def setUp(self):
        """Set up the test environment."""
        # Create a temporary directory for the test files
        self.temp_dir = tempfile.mkdtemp()

        # Create the agent with a mock message bus
        self.message_bus = MagicMock()
>       self.agent = RelationshipAnalystAgent(
            agent_id="test_analyst",
            agent_type="relationship_analyst",
            message_bus=self.message_bus,
            max_workers=1,
            cache_dir=None
        )

tests/unit/test_relationship_analyst_agent.py:31:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <triangulum_lx.agents.relationship_analyst_agent.RelationshipAnalystAgent object at 0x7f62ee97b260>
agent_id = 'test_analyst', message_bus = <MagicMock id='140062864998672'>
config = None
kwargs = {'agent_type': 'relationship_analyst', 'cache_dir': None, 'max_workers': 1}

    def __init__(self,
                 agent_id: Optional[str] = None, # Made Optional for factory
                 message_bus: Optional[EnhancedMessageBus] = None,
                 config: Optional[Dict[str, Any]] = None,
                 **kwargs):
        """
        Initialize the RelationshipAnalystAgent.

        Args:
            agent_id: Unique identifier for the agent.
            message_bus: EnhancedMessageBus for communication.
            config: Agent configuration dictionary. Expected keys:
                    'name' (optional, defaults to agent_id),
                    'cache_dir' (optional),
                    'visualization_dir' (optional, defaults to cache_dir/visualizations).
        """
>       super().__init__(
            agent_id=agent_id,
            agent_type=self.AGENT_TYPE,
            message_bus=message_bus,
            config=config,
            subscribed_message_types=[MessageType.TASK_REQUEST, MessageType.QUERY],
            **kwargs
        )
E       TypeError: triangulum_lx.agents.base_agent.BaseAgent.__init__() got multiple values for keyword argument 'agent_type'

triangulum_lx/agents/relationship_analyst_agent.py:54: TypeError
________________ TestRelationshipAnalystAgent.test_find_cycles _________________

self = <unit.test_relationship_analyst_agent.TestRelationshipAnalystAgent testMethod=test_find_cycles>

    def setUp(self):
        """Set up the test environment."""
        # Create a temporary directory for the test files
        self.temp_dir = tempfile.mkdtemp()

        # Create the agent with a mock message bus
        self.message_bus = MagicMock()
>       self.agent = RelationshipAnalystAgent(
            agent_id="test_analyst",
            agent_type="relationship_analyst",
            message_bus=self.message_bus,
            max_workers=1,
            cache_dir=None
        )

tests/unit/test_relationship_analyst_agent.py:31:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <triangulum_lx.agents.relationship_analyst_agent.RelationshipAnalystAgent object at 0x7f62ef3cf500>
agent_id = 'test_analyst', message_bus = <MagicMock id='140062908760624'>
config = None
kwargs = {'agent_type': 'relationship_analyst', 'cache_dir': None, 'max_workers': 1}

    def __init__(self,
                 agent_id: Optional[str] = None, # Made Optional for factory
                 message_bus: Optional[EnhancedMessageBus] = None,
                 config: Optional[Dict[str, Any]] = None,
                 **kwargs):
        """
        Initialize the RelationshipAnalystAgent.

        Args:
            agent_id: Unique identifier for the agent.
            message_bus: EnhancedMessageBus for communication.
            config: Agent configuration dictionary. Expected keys:
                    'name' (optional, defaults to agent_id),
                    'cache_dir' (optional),
                    'visualization_dir' (optional, defaults to cache_dir/visualizations).
        """
>       super().__init__(
            agent_id=agent_id,
            agent_type=self.AGENT_TYPE,
            message_bus=message_bus,
            config=config,
            subscribed_message_types=[MessageType.TASK_REQUEST, MessageType.QUERY],
            **kwargs
        )
E       TypeError: triangulum_lx.agents.base_agent.BaseAgent.__init__() got multiple values for keyword argument 'agent_type'

triangulum_lx/agents/relationship_analyst_agent.py:54: TypeError
___________ TestRelationshipAnalystAgent.test_get_file_dependencies ____________

self = <unit.test_relationship_analyst_agent.TestRelationshipAnalystAgent testMethod=test_get_file_dependencies>

    def setUp(self):
        """Set up the test environment."""
        # Create a temporary directory for the test files
        self.temp_dir = tempfile.mkdtemp()

        # Create the agent with a mock message bus
        self.message_bus = MagicMock()
>       self.agent = RelationshipAnalystAgent(
            agent_id="test_analyst",
            agent_type="relationship_analyst",
            message_bus=self.message_bus,
            max_workers=1,
            cache_dir=None
        )

tests/unit/test_relationship_analyst_agent.py:31:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <triangulum_lx.agents.relationship_analyst_agent.RelationshipAnalystAgent object at 0x7f62ef3ce210>
agent_id = 'test_analyst', message_bus = <MagicMock id='140062897272208'>
config = None
kwargs = {'agent_type': 'relationship_analyst', 'cache_dir': None, 'max_workers': 1}

    def __init__(self,
                 agent_id: Optional[str] = None, # Made Optional for factory
                 message_bus: Optional[EnhancedMessageBus] = None,
                 config: Optional[Dict[str, Any]] = None,
                 **kwargs):
        """
        Initialize the RelationshipAnalystAgent.

        Args:
            agent_id: Unique identifier for the agent.
            message_bus: EnhancedMessageBus for communication.
            config: Agent configuration dictionary. Expected keys:
                    'name' (optional, defaults to agent_id),
                    'cache_dir' (optional),
                    'visualization_dir' (optional, defaults to cache_dir/visualizations).
        """
>       super().__init__(
            agent_id=agent_id,
            agent_type=self.AGENT_TYPE,
            message_bus=message_bus,
            config=config,
            subscribed_message_types=[MessageType.TASK_REQUEST, MessageType.QUERY],
            **kwargs
        )
E       TypeError: triangulum_lx.agents.base_agent.BaseAgent.__init__() got multiple values for keyword argument 'agent_type'

triangulum_lx/agents/relationship_analyst_agent.py:54: TypeError
____________ TestRelationshipAnalystAgent.test_get_file_dependents _____________

self = <unit.test_relationship_analyst_agent.TestRelationshipAnalystAgent testMethod=test_get_file_dependents>

    def setUp(self):
        """Set up the test environment."""
        # Create a temporary directory for the test files
        self.temp_dir = tempfile.mkdtemp()

        # Create the agent with a mock message bus
        self.message_bus = MagicMock()
>       self.agent = RelationshipAnalystAgent(
            agent_id="test_analyst",
            agent_type="relationship_analyst",
            message_bus=self.message_bus,
            max_workers=1,
            cache_dir=None
        )

tests/unit/test_relationship_analyst_agent.py:31:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <triangulum_lx.agents.relationship_analyst_agent.RelationshipAnalystAgent object at 0x7f62ef3ce930>
agent_id = 'test_analyst', message_bus = <MagicMock id='140062897274224'>
config = None
kwargs = {'agent_type': 'relationship_analyst', 'cache_dir': None, 'max_workers': 1}

    def __init__(self,
                 agent_id: Optional[str] = None, # Made Optional for factory
                 message_bus: Optional[EnhancedMessageBus] = None,
                 config: Optional[Dict[str, Any]] = None,
                 **kwargs):
        """
        Initialize the RelationshipAnalystAgent.

        Args:
            agent_id: Unique identifier for the agent.
            message_bus: EnhancedMessageBus for communication.
            config: Agent configuration dictionary. Expected keys:
                    'name' (optional, defaults to agent_id),
                    'cache_dir' (optional),
                    'visualization_dir' (optional, defaults to cache_dir/visualizations).
        """
>       super().__init__(
            agent_id=agent_id,
            agent_type=self.AGENT_TYPE,
            message_bus=message_bus,
            config=config,
            subscribed_message_types=[MessageType.TASK_REQUEST, MessageType.QUERY],
            **kwargs
        )
E       TypeError: triangulum_lx.agents.base_agent.BaseAgent.__init__() got multiple values for keyword argument 'agent_type'

triangulum_lx/agents/relationship_analyst_agent.py:54: TypeError
_____________ TestRelationshipAnalystAgent.test_get_impacted_files _____________

self = <unit.test_relationship_analyst_agent.TestRelationshipAnalystAgent testMethod=test_get_impacted_files>

    def setUp(self):
        """Set up the test environment."""
        # Create a temporary directory for the test files
        self.temp_dir = tempfile.mkdtemp()

        # Create the agent with a mock message bus
        self.message_bus = MagicMock()
>       self.agent = RelationshipAnalystAgent(
            agent_id="test_analyst",
            agent_type="relationship_analyst",
            message_bus=self.message_bus,
            max_workers=1,
            cache_dir=None
        )

tests/unit/test_relationship_analyst_agent.py:31:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <triangulum_lx.agents.relationship_analyst_agent.RelationshipAnalystAgent object at 0x7f62ee9994c0>
agent_id = 'test_analyst', message_bus = <MagicMock id='140062886768000'>
config = None
kwargs = {'agent_type': 'relationship_analyst', 'cache_dir': None, 'max_workers': 1}

    def __init__(self,
                 agent_id: Optional[str] = None, # Made Optional for factory
                 message_bus: Optional[EnhancedMessageBus] = None,
                 config: Optional[Dict[str, Any]] = None,
                 **kwargs):
        """
        Initialize the RelationshipAnalystAgent.

        Args:
            agent_id: Unique identifier for the agent.
            message_bus: EnhancedMessageBus for communication.
            config: Agent configuration dictionary. Expected keys:
                    'name' (optional, defaults to agent_id),
                    'cache_dir' (optional),
                    'visualization_dir' (optional, defaults to cache_dir/visualizations).
        """
>       super().__init__(
            agent_id=agent_id,
            agent_type=self.AGENT_TYPE,
            message_bus=message_bus,
            config=config,
            subscribed_message_types=[MessageType.TASK_REQUEST, MessageType.QUERY],
            **kwargs
        )
E       TypeError: triangulum_lx.agents.base_agent.BaseAgent.__init__() got multiple values for keyword argument 'agent_type'

triangulum_lx/agents/relationship_analyst_agent.py:54: TypeError
___________ TestRelationshipAnalystAgent.test_get_most_central_files ___________

self = <unit.test_relationship_analyst_agent.TestRelationshipAnalystAgent testMethod=test_get_most_central_files>

    def setUp(self):
        """Set up the test environment."""
        # Create a temporary directory for the test files
        self.temp_dir = tempfile.mkdtemp()

        # Create the agent with a mock message bus
        self.message_bus = MagicMock()
>       self.agent = RelationshipAnalystAgent(
            agent_id="test_analyst",
            agent_type="relationship_analyst",
            message_bus=self.message_bus,
            max_workers=1,
            cache_dir=None
        )

tests/unit/test_relationship_analyst_agent.py:31:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <triangulum_lx.agents.relationship_analyst_agent.RelationshipAnalystAgent object at 0x7f62ee99aa50>
agent_id = 'test_analyst', message_bus = <MagicMock id='140062897258576'>
config = None
kwargs = {'agent_type': 'relationship_analyst', 'cache_dir': None, 'max_workers': 1}

    def __init__(self,
                 agent_id: Optional[str] = None, # Made Optional for factory
                 message_bus: Optional[EnhancedMessageBus] = None,
                 config: Optional[Dict[str, Any]] = None,
                 **kwargs):
        """
        Initialize the RelationshipAnalystAgent.

        Args:
            agent_id: Unique identifier for the agent.
            message_bus: EnhancedMessageBus for communication.
            config: Agent configuration dictionary. Expected keys:
                    'name' (optional, defaults to agent_id),
                    'cache_dir' (optional),
                    'visualization_dir' (optional, defaults to cache_dir/visualizations).
        """
>       super().__init__(
            agent_id=agent_id,
            agent_type=self.AGENT_TYPE,
            message_bus=message_bus,
            config=config,
            subscribed_message_types=[MessageType.TASK_REQUEST, MessageType.QUERY],
            **kwargs
        )
E       TypeError: triangulum_lx.agents.base_agent.BaseAgent.__init__() got multiple values for keyword argument 'agent_type'

triangulum_lx/agents/relationship_analyst_agent.py:54: TypeError
_________ TestRelationshipAnalystAgent.test_handle_query_central_files _________

self = <unit.test_relationship_analyst_agent.TestRelationshipAnalystAgent testMethod=test_handle_query_central_files>

    def setUp(self):
        """Set up the test environment."""
        # Create a temporary directory for the test files
        self.temp_dir = tempfile.mkdtemp()

        # Create the agent with a mock message bus
        self.message_bus = MagicMock()
>       self.agent = RelationshipAnalystAgent(
            agent_id="test_analyst",
            agent_type="relationship_analyst",
            message_bus=self.message_bus,
            max_workers=1,
            cache_dir=None
        )

tests/unit/test_relationship_analyst_agent.py:31:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <triangulum_lx.agents.relationship_analyst_agent.RelationshipAnalystAgent object at 0x7f62ee999b50>
agent_id = 'test_analyst', message_bus = <MagicMock id='140062886575424'>
config = None
kwargs = {'agent_type': 'relationship_analyst', 'cache_dir': None, 'max_workers': 1}

    def __init__(self,
                 agent_id: Optional[str] = None, # Made Optional for factory
                 message_bus: Optional[EnhancedMessageBus] = None,
                 config: Optional[Dict[str, Any]] = None,
                 **kwargs):
        """
        Initialize the RelationshipAnalystAgent.

        Args:
            agent_id: Unique identifier for the agent.
            message_bus: EnhancedMessageBus for communication.
            config: Agent configuration dictionary. Expected keys:
                    'name' (optional, defaults to agent_id),
                    'cache_dir' (optional),
                    'visualization_dir' (optional, defaults to cache_dir/visualizations).
        """
>       super().__init__(
            agent_id=agent_id,
            agent_type=self.AGENT_TYPE,
            message_bus=message_bus,
            config=config,
            subscribed_message_types=[MessageType.TASK_REQUEST, MessageType.QUERY],
            **kwargs
        )
E       TypeError: triangulum_lx.agents.base_agent.BaseAgent.__init__() got multiple values for keyword argument 'agent_type'

triangulum_lx/agents/relationship_analyst_agent.py:54: TypeError
_______ TestRelationshipAnalystAgent.test_handle_query_file_dependencies _______

self = <unit.test_relationship_analyst_agent.TestRelationshipAnalystAgent testMethod=test_handle_query_file_dependencies>

    def setUp(self):
        """Set up the test environment."""
        # Create a temporary directory for the test files
        self.temp_dir = tempfile.mkdtemp()

        # Create the agent with a mock message bus
        self.message_bus = MagicMock()
>       self.agent = RelationshipAnalystAgent(
            agent_id="test_analyst",
            agent_type="relationship_analyst",
            message_bus=self.message_bus,
            max_workers=1,
            cache_dir=None
        )

tests/unit/test_relationship_analyst_agent.py:31:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <triangulum_lx.agents.relationship_analyst_agent.RelationshipAnalystAgent object at 0x7f62ef39b770>
agent_id = 'test_analyst', message_bus = <MagicMock id='140062854918848'>
config = None
kwargs = {'agent_type': 'relationship_analyst', 'cache_dir': None, 'max_workers': 1}

    def __init__(self,
                 agent_id: Optional[str] = None, # Made Optional for factory
                 message_bus: Optional[EnhancedMessageBus] = None,
                 config: Optional[Dict[str, Any]] = None,
                 **kwargs):
        """
        Initialize the RelationshipAnalystAgent.

        Args:
            agent_id: Unique identifier for the agent.
            message_bus: EnhancedMessageBus for communication.
            config: Agent configuration dictionary. Expected keys:
                    'name' (optional, defaults to agent_id),
                    'cache_dir' (optional),
                    'visualization_dir' (optional, defaults to cache_dir/visualizations).
        """
>       super().__init__(
            agent_id=agent_id,
            agent_type=self.AGENT_TYPE,
            message_bus=message_bus,
            config=config,
            subscribed_message_types=[MessageType.TASK_REQUEST, MessageType.QUERY],
            **kwargs
        )
E       TypeError: triangulum_lx.agents.base_agent.BaseAgent.__init__() got multiple values for keyword argument 'agent_type'

triangulum_lx/agents/relationship_analyst_agent.py:54: TypeError
____ TestRelationshipAnalystAgent.test_handle_task_request_analyze_codebase ____

self = <unit.test_relationship_analyst_agent.TestRelationshipAnalystAgent testMethod=test_handle_task_request_analyze_codebase>

    def setUp(self):
        """Set up the test environment."""
        # Create a temporary directory for the test files
        self.temp_dir = tempfile.mkdtemp()

        # Create the agent with a mock message bus
        self.message_bus = MagicMock()
>       self.agent = RelationshipAnalystAgent(
            agent_id="test_analyst",
            agent_type="relationship_analyst",
            message_bus=self.message_bus,
            max_workers=1,
            cache_dir=None
        )

tests/unit/test_relationship_analyst_agent.py:31:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <triangulum_lx.agents.relationship_analyst_agent.RelationshipAnalystAgent object at 0x7f62ef3984a0>
agent_id = 'test_analyst', message_bus = <MagicMock id='140062897060368'>
config = None
kwargs = {'agent_type': 'relationship_analyst', 'cache_dir': None, 'max_workers': 1}

    def __init__(self,
                 agent_id: Optional[str] = None, # Made Optional for factory
                 message_bus: Optional[EnhancedMessageBus] = None,
                 config: Optional[Dict[str, Any]] = None,
                 **kwargs):
        """
        Initialize the RelationshipAnalystAgent.

        Args:
            agent_id: Unique identifier for the agent.
            message_bus: EnhancedMessageBus for communication.
            config: Agent configuration dictionary. Expected keys:
                    'name' (optional, defaults to agent_id),
                    'cache_dir' (optional),
                    'visualization_dir' (optional, defaults to cache_dir/visualizations).
        """
>       super().__init__(
            agent_id=agent_id,
            agent_type=self.AGENT_TYPE,
            message_bus=message_bus,
            config=config,
            subscribed_message_types=[MessageType.TASK_REQUEST, MessageType.QUERY],
            **kwargs
        )
E       TypeError: triangulum_lx.agents.base_agent.BaseAgent.__init__() got multiple values for keyword argument 'agent_type'

triangulum_lx/agents/relationship_analyst_agent.py:54: TypeError
________ TestRelationshipAnalystAgent.test_prioritize_files_for_repair _________

self = <unit.test_relationship_analyst_agent.TestRelationshipAnalystAgent testMethod=test_prioritize_files_for_repair>

    def setUp(self):
        """Set up the test environment."""
        # Create a temporary directory for the test files
        self.temp_dir = tempfile.mkdtemp()

        # Create the agent with a mock message bus
        self.message_bus = MagicMock()
>       self.agent = RelationshipAnalystAgent(
            agent_id="test_analyst",
            agent_type="relationship_analyst",
            message_bus=self.message_bus,
            max_workers=1,
            cache_dir=None
        )

tests/unit/test_relationship_analyst_agent.py:31:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <triangulum_lx.agents.relationship_analyst_agent.RelationshipAnalystAgent object at 0x7f62ecb8d940>
agent_id = 'test_analyst', message_bus = <MagicMock id='140062855056752'>
config = None
kwargs = {'agent_type': 'relationship_analyst', 'cache_dir': None, 'max_workers': 1}

    def __init__(self,
                 agent_id: Optional[str] = None, # Made Optional for factory
                 message_bus: Optional[EnhancedMessageBus] = None,
                 config: Optional[Dict[str, Any]] = None,
                 **kwargs):
        """
        Initialize the RelationshipAnalystAgent.

        Args:
            agent_id: Unique identifier for the agent.
            message_bus: EnhancedMessageBus for communication.
            config: Agent configuration dictionary. Expected keys:
                    'name' (optional, defaults to agent_id),
                    'cache_dir' (optional),
                    'visualization_dir' (optional, defaults to cache_dir/visualizations).
        """
>       super().__init__(
            agent_id=agent_id,
            agent_type=self.AGENT_TYPE,
            message_bus=message_bus,
            config=config,
            subscribed_message_types=[MessageType.TASK_REQUEST, MessageType.QUERY],
            **kwargs
        )
E       TypeError: triangulum_lx.agents.base_agent.BaseAgent.__init__() got multiple values for keyword argument 'agent_type'

triangulum_lx/agents/relationship_analyst_agent.py:54: TypeError
______________ TestRelationshipAnalystAgent.test_process_message _______________

self = <unit.test_relationship_analyst_agent.TestRelationshipAnalystAgent testMethod=test_process_message>

    def setUp(self):
        """Set up the test environment."""
        # Create a temporary directory for the test files
        self.temp_dir = tempfile.mkdtemp()

        # Create the agent with a mock message bus
        self.message_bus = MagicMock()
>       self.agent = RelationshipAnalystAgent(
            agent_id="test_analyst",
            agent_type="relationship_analyst",
            message_bus=self.message_bus,
            max_workers=1,
            cache_dir=None
        )

tests/unit/test_relationship_analyst_agent.py:31:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <triangulum_lx.agents.relationship_analyst_agent.RelationshipAnalystAgent object at 0x7f62ecb8ca10>
agent_id = 'test_analyst', message_bus = <MagicMock id='140062855057856'>
config = None
kwargs = {'agent_type': 'relationship_analyst', 'cache_dir': None, 'max_workers': 1}

    def __init__(self,
                 agent_id: Optional[str] = None, # Made Optional for factory
                 message_bus: Optional[EnhancedMessageBus] = None,
                 config: Optional[Dict[str, Any]] = None,
                 **kwargs):
        """
        Initialize the RelationshipAnalystAgent.

        Args:
            agent_id: Unique identifier for the agent.
            message_bus: EnhancedMessageBus for communication.
            config: Agent configuration dictionary. Expected keys:
                    'name' (optional, defaults to agent_id),
                    'cache_dir' (optional),
                    'visualization_dir' (optional, defaults to cache_dir/visualizations).
        """
>       super().__init__(
            agent_id=agent_id,
            agent_type=self.AGENT_TYPE,
            message_bus=message_bus,
            config=config,
            subscribed_message_types=[MessageType.TASK_REQUEST, MessageType.QUERY],
            **kwargs
        )
E       TypeError: triangulum_lx.agents.base_agent.BaseAgent.__init__() got multiple values for keyword argument 'agent_type'

triangulum_lx/agents/relationship_analyst_agent.py:54: TypeError
______________ TestResponseHandling.test_chunking_and_reassembly _______________

self = <unit.test_response_handling.TestResponseHandling testMethod=test_chunking_and_reassembly>

    def test_chunking_and_reassembly(self):
        """Test chunking and reassembling messages."""
        # Create a message with large content
        large_content = {"data": ["item" * 50 for _ in range(50)]}
        original_message = AgentMessage(
            message_id="test_chunking",
            message_type=MessageType.TASK_RESULT,
            content=large_content,
            sender="sender",
            receiver="receiver",
            timestamp=time.time()
        )

        # Chunk the message
        chunks = self.chunker.chunk_message(original_message)
        self.assertGreater(len(chunks), 1)

        # Reassemble the chunks
        reassembled = self.chunker.reassemble_chunks(chunks)

        # Verify the reassembled message
        self.assertEqual(reassembled.message_id, original_message.message_id)
        self.assertEqual(reassembled.message_type, original_message.message_type)
>       self.assertEqual(len(reassembled.content["data"]), len(original_message.content["data"]))
                                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       KeyError: 'data'

tests/unit/test_response_handling.py:63: KeyError
---------------------------- Captured log teardown -----------------------------
WARNING  triangulum_lx.agents.orchestrator_agent:orchestrator_agent.py:830 No available agent found for task task_cd3f62be-8356-4e0a-8bee-084edce63094
WARNING  triangulum_lx.agents.orchestrator_agent:orchestrator_agent.py:741 No agent available for task task_cd3f62be-8356-4e0a-8bee-084edce63094 with required capabilities: []
_______________ TestResponseHandling.test_large_response_handler _______________

self = <unit.test_response_handling.TestResponseHandling testMethod=test_large_response_handler>

    def test_large_response_handler(self):
        """Test the complete large response handler."""
        # Create a message with large content
        large_content = {"data": ["item" * 100 for _ in range(100)]}
        original_message = AgentMessage(
            message_id="test_large_handler",
            message_type=MessageType.TASK_RESULT,
            content=large_content,
            sender="sender",
            receiver="receiver",
            timestamp=time.time()
        )

        # Process outgoing message with chunking
        message_ids = self.handler.process_outgoing_message(
            original_message,
            large_content_handling="chunked"
        )

        # Verify multiple chunks were published
>       self.assertGreater(len(message_ids), 1)
E       AssertionError: 1 not greater than 1

tests/unit/test_response_handling.py:170: AssertionError
_____________________ TestResponseHandling.test_validation _____________________

self = <unit.test_response_handling.TestResponseHandling testMethod=test_validation>

    def test_validation(self):
        """Test message validation."""
        # Valid message
        valid_message = AgentMessage(
            message_id="test_valid",
            message_type=MessageType.TASK_RESULT,
            content={"result": "valid"},
            sender="sender",
            receiver="receiver",
            timestamp=time.time()
        )

        is_valid, error = self.validator.validate_response(valid_message)
        self.assertTrue(is_valid)
        self.assertIsNone(error)

        # Invalid message (missing sender)
>       invalid_message = AgentMessage(
            message_id="test_invalid",
            message_type=MessageType.TASK_RESULT,
            content={"result": "invalid"},
            sender=None,
            receiver="receiver",
            timestamp=time.time()
        )

tests/unit/test_response_handling.py:109:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
<string>:23: in __init__
    ???
triangulum_lx/agents/message.py:134: in __post_init__
    self.validate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = AgentMessage(message_type=<MessageType.TASK_RESULT: 'task_result'>, content={'result': 'invalid'}, sender=None, messag...chunk_sequence=None, response_id=None, compressed=False, problem_context={}, analysis_results={}, suggested_actions=[])

    def validate(self) -> bool:
        """
        Validate the message structure and content.

        Returns:
            bool: True if the message is valid, raises ValueError otherwise
        """
        if not isinstance(self.message_type, MessageType):
            raise ValueError(f"message_type must be a MessageType enum, got {type(self.message_type)}")
        try:
            # Import here to avoid circular imports
            from triangulum_lx.agents.message_schema import validate_message

            # Convert to dict for validation
            message_dict = self.to_dict()

            # Validate against schema
            is_valid, errors = validate_message(message_dict)

            if not is_valid:
                error_msg = "; ".join(errors)
>               raise ValueError(f"Message validation failed: {error_msg}")
E               ValueError: Message validation failed: Field 'sender' is required

triangulum_lx/agents/message.py:161: ValueError
__________________ TestStrategyAgent.test_determine_bug_type ___________________

self = <unit.test_strategy_agent.TestStrategyAgent testMethod=test_determine_bug_type>

    def setUp(self):
        """Set up the test environment."""
        # Create the agent with a mock message bus
        self.message_bus = MagicMock()
>       self.agent = StrategyAgent(
            agent_id="test_strategy_agent",
            agent_type="strategy_formulation",
            message_bus=self.message_bus
        )

tests/unit/test_strategy_agent.py:24:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <triangulum_lx.agents.strategy_agent.StrategyAgent object at 0x7f62ef3c0920>
agent_id = 'test_strategy_agent', message_bus = <MagicMock id='140062897233536'>
config = None, kwargs = {'agent_type': 'strategy_formulation'}

    def __init__(
        self,
        agent_id: Optional[str] = None,
        # agent_type: str = "strategy_formulation", # Use AGENT_TYPE
        message_bus: Optional[EnhancedMessageBus] = None,
        # subscribed_message_types: Optional[List[MessageType]] = None, # Define in super()
        config: Optional[Dict[str, Any]] = None,
        **kwargs # To catch other BaseAgent params
    ):
        """
        Initialize the Strategy Formulation Agent.

        Args:
            agent_id: Unique identifier for the agent (generated if not provided)
            message_bus: Enhanced message bus for agent communication
            config: Agent configuration dictionary
        """
>       super().__init__(
            agent_id=agent_id,
            agent_type=self.AGENT_TYPE, # Use class variable
            message_bus=message_bus,
            subscribed_message_types=[ # Define directly
                MessageType.TASK_REQUEST,
                MessageType.QUERY,
                MessageType.TASK_RESULT,
                MessageType.STATUS_UPDATE
            ],
            config=config,
            **kwargs # Pass through
        )
E       TypeError: triangulum_lx.agents.base_agent.BaseAgent.__init__() got multiple values for keyword argument 'agent_type'

triangulum_lx/agents/strategy_agent.py:154: TypeError
_____________ TestStrategyAgent.test_evaluate_strategy_acceptable ______________

self = <unit.test_strategy_agent.TestStrategyAgent testMethod=test_evaluate_strategy_acceptable>

    def setUp(self):
        """Set up the test environment."""
        # Create the agent with a mock message bus
        self.message_bus = MagicMock()
>       self.agent = StrategyAgent(
            agent_id="test_strategy_agent",
            agent_type="strategy_formulation",
            message_bus=self.message_bus
        )

tests/unit/test_strategy_agent.py:24:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <triangulum_lx.agents.strategy_agent.StrategyAgent object at 0x7f62ef4aacf0>
agent_id = 'test_strategy_agent', message_bus = <MagicMock id='140062897811248'>
config = None, kwargs = {'agent_type': 'strategy_formulation'}

    def __init__(
        self,
        agent_id: Optional[str] = None,
        # agent_type: str = "strategy_formulation", # Use AGENT_TYPE
        message_bus: Optional[EnhancedMessageBus] = None,
        # subscribed_message_types: Optional[List[MessageType]] = None, # Define in super()
        config: Optional[Dict[str, Any]] = None,
        **kwargs # To catch other BaseAgent params
    ):
        """
        Initialize the Strategy Formulation Agent.

        Args:
            agent_id: Unique identifier for the agent (generated if not provided)
            message_bus: Enhanced message bus for agent communication
            config: Agent configuration dictionary
        """
>       super().__init__(
            agent_id=agent_id,
            agent_type=self.AGENT_TYPE, # Use class variable
            message_bus=message_bus,
            subscribed_message_types=[ # Define directly
                MessageType.TASK_REQUEST,
                MessageType.QUERY,
                MessageType.TASK_RESULT,
                MessageType.STATUS_UPDATE
            ],
            config=config,
            **kwargs # Pass through
        )
E       TypeError: triangulum_lx.agents.base_agent.BaseAgent.__init__() got multiple values for keyword argument 'agent_type'

triangulum_lx/agents/strategy_agent.py:154: TypeError
____________ TestStrategyAgent.test_evaluate_strategy_unacceptable _____________

self = <unit.test_strategy_agent.TestStrategyAgent testMethod=test_evaluate_strategy_unacceptable>

    def setUp(self):
        """Set up the test environment."""
        # Create the agent with a mock message bus
        self.message_bus = MagicMock()
>       self.agent = StrategyAgent(
            agent_id="test_strategy_agent",
            agent_type="strategy_formulation",
            message_bus=self.message_bus
        )

tests/unit/test_strategy_agent.py:24:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <triangulum_lx.agents.strategy_agent.StrategyAgent object at 0x7f62ef327fb0>
agent_id = 'test_strategy_agent', message_bus = <MagicMock id='140062898167712'>
config = None, kwargs = {'agent_type': 'strategy_formulation'}

    def __init__(
        self,
        agent_id: Optional[str] = None,
        # agent_type: str = "strategy_formulation", # Use AGENT_TYPE
        message_bus: Optional[EnhancedMessageBus] = None,
        # subscribed_message_types: Optional[List[MessageType]] = None, # Define in super()
        config: Optional[Dict[str, Any]] = None,
        **kwargs # To catch other BaseAgent params
    ):
        """
        Initialize the Strategy Formulation Agent.

        Args:
            agent_id: Unique identifier for the agent (generated if not provided)
            message_bus: Enhanced message bus for agent communication
            config: Agent configuration dictionary
        """
>       super().__init__(
            agent_id=agent_id,
            agent_type=self.AGENT_TYPE, # Use class variable
            message_bus=message_bus,
            subscribed_message_types=[ # Define directly
                MessageType.TASK_REQUEST,
                MessageType.QUERY,
                MessageType.TASK_RESULT,
                MessageType.STATUS_UPDATE
            ],
            config=config,
            **kwargs # Pass through
        )
E       TypeError: triangulum_lx.agents.base_agent.BaseAgent.__init__() got multiple values for keyword argument 'agent_type'

triangulum_lx/agents/strategy_agent.py:154: TypeError
___________________ TestStrategyAgent.test_extract_variables ___________________

self = <unit.test_strategy_agent.TestStrategyAgent testMethod=test_extract_variables>

    def setUp(self):
        """Set up the test environment."""
        # Create the agent with a mock message bus
        self.message_bus = MagicMock()
>       self.agent = StrategyAgent(
            agent_id="test_strategy_agent",
            agent_type="strategy_formulation",
            message_bus=self.message_bus
        )

tests/unit/test_strategy_agent.py:24:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <triangulum_lx.agents.strategy_agent.StrategyAgent object at 0x7f62ef3c5ca0>
agent_id = 'test_strategy_agent', message_bus = <MagicMock id='140062896585424'>
config = None, kwargs = {'agent_type': 'strategy_formulation'}

    def __init__(
        self,
        agent_id: Optional[str] = None,
        # agent_type: str = "strategy_formulation", # Use AGENT_TYPE
        message_bus: Optional[EnhancedMessageBus] = None,
        # subscribed_message_types: Optional[List[MessageType]] = None, # Define in super()
        config: Optional[Dict[str, Any]] = None,
        **kwargs # To catch other BaseAgent params
    ):
        """
        Initialize the Strategy Formulation Agent.

        Args:
            agent_id: Unique identifier for the agent (generated if not provided)
            message_bus: Enhanced message bus for agent communication
            config: Agent configuration dictionary
        """
>       super().__init__(
            agent_id=agent_id,
            agent_type=self.AGENT_TYPE, # Use class variable
            message_bus=message_bus,
            subscribed_message_types=[ # Define directly
                MessageType.TASK_REQUEST,
                MessageType.QUERY,
                MessageType.TASK_RESULT,
                MessageType.STATUS_UPDATE
            ],
            config=config,
            **kwargs # Pass through
        )
E       TypeError: triangulum_lx.agents.base_agent.BaseAgent.__init__() got multiple values for keyword argument 'agent_type'

triangulum_lx/agents/strategy_agent.py:154: TypeError
____________ TestStrategyAgent.test_formulate_strategy_null_pointer ____________

self = <unit.test_strategy_agent.TestStrategyAgent testMethod=test_formulate_strategy_null_pointer>

    def setUp(self):
        """Set up the test environment."""
        # Create the agent with a mock message bus
        self.message_bus = MagicMock()
>       self.agent = StrategyAgent(
            agent_id="test_strategy_agent",
            agent_type="strategy_formulation",
            message_bus=self.message_bus
        )

tests/unit/test_strategy_agent.py:24:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <triangulum_lx.agents.strategy_agent.StrategyAgent object at 0x7f62ef3c6d50>
agent_id = 'test_strategy_agent', message_bus = <MagicMock id='140062897231088'>
config = None, kwargs = {'agent_type': 'strategy_formulation'}

    def __init__(
        self,
        agent_id: Optional[str] = None,
        # agent_type: str = "strategy_formulation", # Use AGENT_TYPE
        message_bus: Optional[EnhancedMessageBus] = None,
        # subscribed_message_types: Optional[List[MessageType]] = None, # Define in super()
        config: Optional[Dict[str, Any]] = None,
        **kwargs # To catch other BaseAgent params
    ):
        """
        Initialize the Strategy Formulation Agent.

        Args:
            agent_id: Unique identifier for the agent (generated if not provided)
            message_bus: Enhanced message bus for agent communication
            config: Agent configuration dictionary
        """
>       super().__init__(
            agent_id=agent_id,
            agent_type=self.AGENT_TYPE, # Use class variable
            message_bus=message_bus,
            subscribed_message_types=[ # Define directly
                MessageType.TASK_REQUEST,
                MessageType.QUERY,
                MessageType.TASK_RESULT,
                MessageType.STATUS_UPDATE
            ],
            config=config,
            **kwargs # Pass through
        )
E       TypeError: triangulum_lx.agents.base_agent.BaseAgent.__init__() got multiple values for keyword argument 'agent_type'

triangulum_lx/agents/strategy_agent.py:154: TypeError
___________ TestStrategyAgent.test_formulate_strategy_resource_leak ____________

self = <unit.test_strategy_agent.TestStrategyAgent testMethod=test_formulate_strategy_resource_leak>

    def setUp(self):
        """Set up the test environment."""
        # Create the agent with a mock message bus
        self.message_bus = MagicMock()
>       self.agent = StrategyAgent(
            agent_id="test_strategy_agent",
            agent_type="strategy_formulation",
            message_bus=self.message_bus
        )

tests/unit/test_strategy_agent.py:24:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <triangulum_lx.agents.strategy_agent.StrategyAgent object at 0x7f62ef3c40e0>
agent_id = 'test_strategy_agent', message_bus = <MagicMock id='140062897235600'>
config = None, kwargs = {'agent_type': 'strategy_formulation'}

    def __init__(
        self,
        agent_id: Optional[str] = None,
        # agent_type: str = "strategy_formulation", # Use AGENT_TYPE
        message_bus: Optional[EnhancedMessageBus] = None,
        # subscribed_message_types: Optional[List[MessageType]] = None, # Define in super()
        config: Optional[Dict[str, Any]] = None,
        **kwargs # To catch other BaseAgent params
    ):
        """
        Initialize the Strategy Formulation Agent.

        Args:
            agent_id: Unique identifier for the agent (generated if not provided)
            message_bus: Enhanced message bus for agent communication
            config: Agent configuration dictionary
        """
>       super().__init__(
            agent_id=agent_id,
            agent_type=self.AGENT_TYPE, # Use class variable
            message_bus=message_bus,
            subscribed_message_types=[ # Define directly
                MessageType.TASK_REQUEST,
                MessageType.QUERY,
                MessageType.TASK_RESULT,
                MessageType.STATUS_UPDATE
            ],
            config=config,
            **kwargs # Pass through
        )
E       TypeError: triangulum_lx.agents.base_agent.BaseAgent.__init__() got multiple values for keyword argument 'agent_type'

triangulum_lx/agents/strategy_agent.py:154: TypeError
_________________ TestStrategyAgent.test_handle_error_messages _________________

self = <unit.test_strategy_agent.TestStrategyAgent testMethod=test_handle_error_messages>

    def setUp(self):
        """Set up the test environment."""
        # Create the agent with a mock message bus
        self.message_bus = MagicMock()
>       self.agent = StrategyAgent(
            agent_id="test_strategy_agent",
            agent_type="strategy_formulation",
            message_bus=self.message_bus
        )

tests/unit/test_strategy_agent.py:24:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <triangulum_lx.agents.strategy_agent.StrategyAgent object at 0x7f62ef4ebef0>
agent_id = 'test_strategy_agent', message_bus = <MagicMock id='140062897226528'>
config = None, kwargs = {'agent_type': 'strategy_formulation'}

    def __init__(
        self,
        agent_id: Optional[str] = None,
        # agent_type: str = "strategy_formulation", # Use AGENT_TYPE
        message_bus: Optional[EnhancedMessageBus] = None,
        # subscribed_message_types: Optional[List[MessageType]] = None, # Define in super()
        config: Optional[Dict[str, Any]] = None,
        **kwargs # To catch other BaseAgent params
    ):
        """
        Initialize the Strategy Formulation Agent.

        Args:
            agent_id: Unique identifier for the agent (generated if not provided)
            message_bus: Enhanced message bus for agent communication
            config: Agent configuration dictionary
        """
>       super().__init__(
            agent_id=agent_id,
            agent_type=self.AGENT_TYPE, # Use class variable
            message_bus=message_bus,
            subscribed_message_types=[ # Define directly
                MessageType.TASK_REQUEST,
                MessageType.QUERY,
                MessageType.TASK_RESULT,
                MessageType.STATUS_UPDATE
            ],
            config=config,
            **kwargs # Pass through
        )
E       TypeError: triangulum_lx.agents.base_agent.BaseAgent.__init__() got multiple values for keyword argument 'agent_type'

triangulum_lx/agents/strategy_agent.py:154: TypeError
_________________ TestStrategyAgent.test_handle_other_message __________________

self = <unit.test_strategy_agent.TestStrategyAgent testMethod=test_handle_other_message>

    def setUp(self):
        """Set up the test environment."""
        # Create the agent with a mock message bus
        self.message_bus = MagicMock()
>       self.agent = StrategyAgent(
            agent_id="test_strategy_agent",
            agent_type="strategy_formulation",
            message_bus=self.message_bus
        )

tests/unit/test_strategy_agent.py:24:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <triangulum_lx.agents.strategy_agent.StrategyAgent object at 0x7f62ef4eb4d0>
agent_id = 'test_strategy_agent', message_bus = <MagicMock id='140062897233104'>
config = None, kwargs = {'agent_type': 'strategy_formulation'}

    def __init__(
        self,
        agent_id: Optional[str] = None,
        # agent_type: str = "strategy_formulation", # Use AGENT_TYPE
        message_bus: Optional[EnhancedMessageBus] = None,
        # subscribed_message_types: Optional[List[MessageType]] = None, # Define in super()
        config: Optional[Dict[str, Any]] = None,
        **kwargs # To catch other BaseAgent params
    ):
        """
        Initialize the Strategy Formulation Agent.

        Args:
            agent_id: Unique identifier for the agent (generated if not provided)
            message_bus: Enhanced message bus for agent communication
            config: Agent configuration dictionary
        """
>       super().__init__(
            agent_id=agent_id,
            agent_type=self.AGENT_TYPE, # Use class variable
            message_bus=message_bus,
            subscribed_message_types=[ # Define directly
                MessageType.TASK_REQUEST,
                MessageType.QUERY,
                MessageType.TASK_RESULT,
                MessageType.STATUS_UPDATE
            ],
            config=config,
            **kwargs # Pass through
        )
E       TypeError: triangulum_lx.agents.base_agent.BaseAgent.__init__() got multiple values for keyword argument 'agent_type'

triangulum_lx/agents/strategy_agent.py:154: TypeError
__________ TestStrategyAgent.test_handle_query_get_strategy_templates __________

self = <unit.test_strategy_agent.TestStrategyAgent testMethod=test_handle_query_get_strategy_templates>

    def setUp(self):
        """Set up the test environment."""
        # Create the agent with a mock message bus
        self.message_bus = MagicMock()
>       self.agent = StrategyAgent(
            agent_id="test_strategy_agent",
            agent_type="strategy_formulation",
            message_bus=self.message_bus
        )

tests/unit/test_strategy_agent.py:24:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <triangulum_lx.agents.strategy_agent.StrategyAgent object at 0x7f62ef4ade20>
agent_id = 'test_strategy_agent', message_bus = <MagicMock id='140062898437440'>
config = None, kwargs = {'agent_type': 'strategy_formulation'}

    def __init__(
        self,
        agent_id: Optional[str] = None,
        # agent_type: str = "strategy_formulation", # Use AGENT_TYPE
        message_bus: Optional[EnhancedMessageBus] = None,
        # subscribed_message_types: Optional[List[MessageType]] = None, # Define in super()
        config: Optional[Dict[str, Any]] = None,
        **kwargs # To catch other BaseAgent params
    ):
        """
        Initialize the Strategy Formulation Agent.

        Args:
            agent_id: Unique identifier for the agent (generated if not provided)
            message_bus: Enhanced message bus for agent communication
            config: Agent configuration dictionary
        """
>       super().__init__(
            agent_id=agent_id,
            agent_type=self.AGENT_TYPE, # Use class variable
            message_bus=message_bus,
            subscribed_message_types=[ # Define directly
                MessageType.TASK_REQUEST,
                MessageType.QUERY,
                MessageType.TASK_RESULT,
                MessageType.STATUS_UPDATE
            ],
            config=config,
            **kwargs # Pass through
        )
E       TypeError: triangulum_lx.agents.base_agent.BaseAgent.__init__() got multiple values for keyword argument 'agent_type'

triangulum_lx/agents/strategy_agent.py:154: TypeError
________ TestStrategyAgent.test_handle_task_request_formulate_strategy _________

self = <unit.test_strategy_agent.TestStrategyAgent testMethod=test_handle_task_request_formulate_strategy>

    def setUp(self):
        """Set up the test environment."""
        # Create the agent with a mock message bus
        self.message_bus = MagicMock()
>       self.agent = StrategyAgent(
            agent_id="test_strategy_agent",
            agent_type="strategy_formulation",
            message_bus=self.message_bus
        )

tests/unit/test_strategy_agent.py:24:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <triangulum_lx.agents.strategy_agent.StrategyAgent object at 0x7f62ef3a14c0>
agent_id = 'test_strategy_agent', message_bus = <MagicMock id='140062898182800'>
config = None, kwargs = {'agent_type': 'strategy_formulation'}

    def __init__(
        self,
        agent_id: Optional[str] = None,
        # agent_type: str = "strategy_formulation", # Use AGENT_TYPE
        message_bus: Optional[EnhancedMessageBus] = None,
        # subscribed_message_types: Optional[List[MessageType]] = None, # Define in super()
        config: Optional[Dict[str, Any]] = None,
        **kwargs # To catch other BaseAgent params
    ):
        """
        Initialize the Strategy Formulation Agent.

        Args:
            agent_id: Unique identifier for the agent (generated if not provided)
            message_bus: Enhanced message bus for agent communication
            config: Agent configuration dictionary
        """
>       super().__init__(
            agent_id=agent_id,
            agent_type=self.AGENT_TYPE, # Use class variable
            message_bus=message_bus,
            subscribed_message_types=[ # Define directly
                MessageType.TASK_REQUEST,
                MessageType.QUERY,
                MessageType.TASK_RESULT,
                MessageType.STATUS_UPDATE
            ],
            config=config,
            **kwargs # Pass through
        )
E       TypeError: triangulum_lx.agents.base_agent.BaseAgent.__init__() got multiple values for keyword argument 'agent_type'

triangulum_lx/agents/strategy_agent.py:154: TypeError
____________________ TestSystemMonitor.test_export_metrics _____________________

self = <unit.test_system_monitor.TestSystemMonitor testMethod=test_export_metrics>
mock_json_dumps = <MagicMock name='dumps' id='140062896996224'>
mock_open = <MagicMock name='open' id='140062896982928'>

    @patch('builtins.open')
    @patch('json.dumps')
    def test_export_metrics(self, mock_json_dumps, mock_open):
        """Test exporting metrics."""
        # Set up test metrics
        self.monitor.metrics = {
            'timestamp': time.time(),
            'cpu_percent': 50.0,
            'memory_percent': 60.0,
            'disk_percent': 70.0,
            'warnings': [],
            'errors': []
        }
        mock_json_dumps.return_value = '{"metrics": "test"}'

        # Export metrics to JSON
>       result = self.monitor.export_metrics(output_format='json')
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/unit/test_system_monitor.py:211:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
triangulum_lx/monitoring/system_monitor.py:298: in export_metrics
    self.check_health()
triangulum_lx/monitoring/system_monitor.py:103: in check_health
    cpu_percent = psutil.cpu_percent(interval=0.1)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/home/jules/.pyenv/versions/3.12.11/lib/python3.12/site-packages/psutil/__init__.py:1813: in cpu_percent
    t1 = cpu_times()
         ^^^^^^^^^^^
/home/jules/.pyenv/versions/3.12.11/lib/python3.12/site-packages/psutil/__init__.py:1681: in cpu_times
    return _psplatform.cpu_times()
           ^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

    def cpu_times():
        """Return a named tuple representing the following system-wide
        CPU times:
        (user, nice, system, idle, iowait, irq, softirq [steal, [guest,
         [guest_nice]]])
        Last 3 fields may not be available on all Linux kernel versions.
        """
        procfs_path = get_procfs_path()
        set_scputimes_ntuple(procfs_path)
        with open_binary(f"{procfs_path}/stat") as f:
            values = f.readline().split()
        fields = values[1 : len(scputimes._fields) + 1]
        fields = [float(x) / CLOCK_TICKS for x in fields]
>       return scputimes(*fields)
               ^^^^^^^^^^^^^^^^^^
E       TypeError: scputimes.__new__() missing 10 required positional arguments: 'user', 'nice', 'system', 'idle', 'iowait', 'irq', 'softirq', 'steal', 'guest', and 'guest_nice'

/home/jules/.pyenv/versions/3.12.11/lib/python3.12/site-packages/psutil/_pslinux.py:558: TypeError
____________________ TestSimpleBug.test_bug_resolution_flow ____________________

self = <triangulum_lx.tests.smoke.test_simple_bug.TestSimpleBug testMethod=test_bug_resolution_flow>

    def setUp(self):
        """Set up the test environment with a project structure"""
        self.test_dir = Path("test_project")
        if not self.test_dir.exists():
            self.test_dir.mkdir()

        # Create a simple test project
        self._create_test_project()

        # Initialize engine and monitor
>       self.engine = TriangulumEngine()
                      ^^^^^^^^^^^^^^^^^^
E       TypeError: TriangulumEngine.__init__() missing 1 required positional argument: 'config'

triangulum_lx/tests/smoke/test_simple_bug.py:43: TypeError
=============================== warnings summary ===============================
triangulum_lx/tooling/test_runner.py:15
  /app/triangulum_lx/tooling/test_runner.py:15: DeprecationWarning: The 'triangulum_lx.tooling.fs_ops' module is deprecated and will be removed. Please import from 'triangulum_lx.utils.file_ops' instead.
    from triangulum_lx.tooling.fs_ops import atomic_write, atomic_delete

triangulum_lx/agents/test_message_bus.py:19
  /app/triangulum_lx/agents/test_message_bus.py:19: PytestCollectionWarning: cannot collect test class 'TestEnhancedMessageBus' because it has a __init__ constructor (from: tests/test_agentic_system.py)
    class TestEnhancedMessageBus(EnhancedMessageBus):

triangulum_lx/tooling/test_runner.py:18
  /app/triangulum_lx/tooling/test_runner.py:18: PytestCollectionWarning: cannot collect test class 'TestResult' because it has a __init__ constructor (from: tests/test_repair_workflow.py)
    class TestResult:

tests/unit/test_base_agent.py:21
  /app/tests/unit/test_base_agent.py:21: PytestCollectionWarning: cannot collect test class 'TestAgent' because it has a __init__ constructor (from: tests/unit/test_base_agent.py)
    class TestAgent(BaseAgent):

triangulum_lx/tooling/test_runner.py:18
  /app/triangulum_lx/tooling/test_runner.py:18: PytestCollectionWarning: cannot collect test class 'TestResult' because it has a __init__ constructor (from: tests/unit/test_patcher_agent.py)
    class TestResult:

triangulum_lx/agents/test_message_bus.py:19
  /app/triangulum_lx/agents/test_message_bus.py:19: PytestCollectionWarning: cannot collect test class 'TestEnhancedMessageBus' because it has a __init__ constructor (from: triangulum_lx/agents/test_message_bus.py)
    class TestEnhancedMessageBus(EnhancedMessageBus):

triangulum_lx/tooling/test_runner.py:18
  /app/triangulum_lx/tooling/test_runner.py:18: PytestCollectionWarning: cannot collect test class 'TestResult' because it has a __init__ constructor (from: triangulum_lx/tooling/test_runner.py)
    class TestResult:

triangulum_lx/tooling/test_runner.py:26
  /app/triangulum_lx/tooling/test_runner.py:26: PytestCollectionWarning: cannot collect test class 'TestRunner' because it has a __init__ constructor (from: triangulum_lx/tooling/test_runner.py)
    class TestRunner:

tests/test_startup_sequence.py::test_successful_startup
  /home/jules/.pyenv/versions/3.12.11/lib/python3.12/site-packages/_pytest/python.py:161: PytestReturnNotNoneWarning: Test functions should return None, but tests/test_startup_sequence.py::test_successful_startup returned <class 'bool'>.
  Did you mean to use `assert` instead of `return`?
  See https://docs.pytest.org/en/stable/how-to/assert.html#return-not-none for more information.
    warnings.warn(

tests/test_startup_sequence.py::test_error_recovery
  /home/jules/.pyenv/versions/3.12.11/lib/python3.12/site-packages/_pytest/python.py:161: PytestReturnNotNoneWarning: Test functions should return None, but tests/test_startup_sequence.py::test_error_recovery returned <class 'bool'>.
  Did you mean to use `assert` instead of `return`?
  See https://docs.pytest.org/en/stable/how-to/assert.html#return-not-none for more information.
    warnings.warn(

tests/test_startup_sequence.py::test_parallel_vs_sequential
  /home/jules/.pyenv/versions/3.12.11/lib/python3.12/site-packages/_pytest/python.py:161: PytestReturnNotNoneWarning: Test functions should return None, but tests/test_startup_sequence.py::test_parallel_vs_sequential returned <class 'bool'>.
  Did you mean to use `assert` instead of `return`?
  See https://docs.pytest.org/en/stable/how-to/assert.html#return-not-none for more information.
    warnings.warn(

tests/test_startup_sequence.py::test_component_dependencies
  /home/jules/.pyenv/versions/3.12.11/lib/python3.12/site-packages/_pytest/python.py:161: PytestReturnNotNoneWarning: Test functions should return None, but tests/test_startup_sequence.py::test_component_dependencies returned <class 'bool'>.
  Did you mean to use `assert` instead of `return`?
  See https://docs.pytest.org/en/stable/how-to/assert.html#return-not-none for more information.
    warnings.warn(

tests/unit/test_fs_ops.py::test_parallel_atomic_writes_no_stale_reads[True]
tests/unit/test_fs_ops.py::test_parallel_atomic_writes_no_stale_reads[True]
tests/unit/test_fs_ops.py::test_parallel_atomic_writes_no_stale_reads[True]
tests/unit/test_fs_ops.py::test_parallel_atomic_writes_no_stale_reads[True]
tests/unit/test_fs_ops.py::test_parallel_atomic_writes_no_stale_reads[False]
tests/unit/test_fs_ops.py::test_parallel_atomic_writes_no_stale_reads[False]
tests/unit/test_fs_ops.py::test_parallel_atomic_writes_no_stale_reads[False]
tests/unit/test_fs_ops.py::test_parallel_atomic_writes_no_stale_reads[False]
  /home/jules/.pyenv/versions/3.12.11/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=2036) is multi-threaded, use of fork() may lead to deadlocks in the child.
    self.pid = os.fork()

tests/unit/test_implementation_agent.py::TestImplementationAgent::test_apply_implementation
tests/unit/test_implementation_agent.py::TestImplementationAgent::test_apply_implementation
tests/unit/test_implementation_agent.py::TestImplementationAgent::test_implement_null_pointer_strategy
tests/unit/test_implementation_agent.py::TestImplementationAgent::test_implement_resource_leak_strategy
tests/unit/test_implementation_agent.py::TestImplementationAgent::test_implement_resource_leak_strategy
tests/unit/test_implementation_agent.py::TestImplementationAgent::test_implement_resource_leak_strategy
tests/unit/test_implementation_agent.py::TestImplementationAgent::test_rollback_implementation
tests/unit/test_implementation_agent.py::TestImplementationAgent::test_validation_failure_handling
  /app/triangulum_lx/agents/implementation_agent.py:778: DeprecationWarning: ast.Num is deprecated and will be removed in Python 3.14; use ast.Constant instead
    if isinstance(value_node, ast.Num):

tests/unit/test_implementation_agent.py::TestImplementationAgent::test_apply_implementation
tests/unit/test_implementation_agent.py::TestImplementationAgent::test_apply_implementation
tests/unit/test_implementation_agent.py::TestImplementationAgent::test_implement_null_pointer_strategy
tests/unit/test_implementation_agent.py::TestImplementationAgent::test_implement_resource_leak_strategy
tests/unit/test_implementation_agent.py::TestImplementationAgent::test_implement_resource_leak_strategy
tests/unit/test_implementation_agent.py::TestImplementationAgent::test_implement_resource_leak_strategy
tests/unit/test_implementation_agent.py::TestImplementationAgent::test_rollback_implementation
tests/unit/test_implementation_agent.py::TestImplementationAgent::test_validation_failure_handling
  /app/triangulum_lx/agents/implementation_agent.py:780: DeprecationWarning: ast.Str is deprecated and will be removed in Python 3.14; use ast.Constant instead
    elif isinstance(value_node, ast.Str):

tests/unit/test_implementation_agent.py::TestImplementationAgent::test_apply_implementation
tests/unit/test_implementation_agent.py::TestImplementationAgent::test_apply_implementation
tests/unit/test_implementation_agent.py::TestImplementationAgent::test_implement_null_pointer_strategy
tests/unit/test_implementation_agent.py::TestImplementationAgent::test_implement_resource_leak_strategy
tests/unit/test_implementation_agent.py::TestImplementationAgent::test_implement_resource_leak_strategy
tests/unit/test_implementation_agent.py::TestImplementationAgent::test_implement_resource_leak_strategy
tests/unit/test_implementation_agent.py::TestImplementationAgent::test_rollback_implementation
tests/unit/test_implementation_agent.py::TestImplementationAgent::test_validation_failure_handling
  /app/triangulum_lx/agents/implementation_agent.py:790: DeprecationWarning: ast.NameConstant is deprecated and will be removed in Python 3.14; use ast.Constant instead
    elif isinstance(value_node, ast.NameConstant) and value_node.value is None:

tests/unit/test_implementation_agent.py::TestImplementationAgent::test_apply_implementation
tests/unit/test_implementation_agent.py::TestImplementationAgent::test_implement_null_pointer_strategy
tests/unit/test_implementation_agent.py::TestImplementationAgent::test_implement_resource_leak_strategy
tests/unit/test_implementation_agent.py::TestImplementationAgent::test_implement_resource_leak_strategy
tests/unit/test_implementation_agent.py::TestImplementationAgent::test_implement_resource_leak_strategy
tests/unit/test_implementation_agent.py::TestImplementationAgent::test_rollback_implementation
tests/unit/test_implementation_agent.py::TestImplementationAgent::test_validation_failure_handling
  /app/triangulum_lx/agents/implementation_agent.py:792: DeprecationWarning: ast.NameConstant is deprecated and will be removed in Python 3.14; use ast.Constant instead
    elif isinstance(value_node, ast.NameConstant):

triangulum_lx/tests/unit/test_transition.py::TestTransition::test_phase_transitions
  /home/jules/.pyenv/versions/3.12.11/lib/python3.12/unittest/case.py:589: RuntimeWarning: coroutine 'TestTransition.test_phase_transitions' was never awaited
    if method() is not None:
  Enable tracemalloc to get traceback where the object was allocated.
  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.

triangulum_lx/tests/unit/test_transition.py::TestTransition::test_phase_transitions
  /home/jules/.pyenv/versions/3.12.11/lib/python3.12/unittest/case.py:690: DeprecationWarning: It is deprecated to return a value that is not None from a test case (<bound method TestTransition.test_phase_transitions of <triangulum_lx.tests.unit.test_transition.TestTransition testMethod=test_phase_transitions>>)
    return self.run(*args, **kwds)

triangulum_lx/tests/unit/test_transition.py::TestTransition::test_terminal_states
  /home/jules/.pyenv/versions/3.12.11/lib/python3.12/unittest/case.py:589: RuntimeWarning: coroutine 'TestTransition.test_terminal_states' was never awaited
    if method() is not None:
  Enable tracemalloc to get traceback where the object was allocated.
  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.

triangulum_lx/tests/unit/test_transition.py::TestTransition::test_terminal_states
  /home/jules/.pyenv/versions/3.12.11/lib/python3.12/unittest/case.py:690: DeprecationWarning: It is deprecated to return a value that is not None from a test case (<bound method TestTransition.test_terminal_states of <triangulum_lx.tests.unit.test_transition.TestTransition testMethod=test_terminal_states>>)
    return self.run(*args, **kwds)

triangulum_lx/tests/unit/test_transition.py::TestTransition::test_timer_countdown
  /home/jules/.pyenv/versions/3.12.11/lib/python3.12/unittest/case.py:589: RuntimeWarning: coroutine 'TestTransition.test_timer_countdown' was never awaited
    if method() is not None:
  Enable tracemalloc to get traceback where the object was allocated.
  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.

triangulum_lx/tests/unit/test_transition.py::TestTransition::test_timer_countdown
  /home/jules/.pyenv/versions/3.12.11/lib/python3.12/unittest/case.py:690: DeprecationWarning: It is deprecated to return a value that is not None from a test case (<bound method TestTransition.test_timer_countdown of <triangulum_lx.tests.unit.test_transition.TestTransition testMethod=test_timer_countdown>>)
    return self.run(*args, **kwds)

triangulum_lx/tests/unit/test_transition.py::TestTransition::test_wait_stays_waiting
  /home/jules/.pyenv/versions/3.12.11/lib/python3.12/unittest/case.py:589: RuntimeWarning: coroutine 'TestTransition.test_wait_stays_waiting' was never awaited
    if method() is not None:
  Enable tracemalloc to get traceback where the object was allocated.
  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.

triangulum_lx/tests/unit/test_transition.py::TestTransition::test_wait_stays_waiting
  /home/jules/.pyenv/versions/3.12.11/lib/python3.12/unittest/case.py:690: DeprecationWarning: It is deprecated to return a value that is not None from a test case (<bound method TestTransition.test_wait_stays_waiting of <triangulum_lx.tests.unit.test_transition.TestTransition testMethod=test_wait_stays_waiting>>)
    return self.run(*args, **kwds)

triangulum_lx/tests/unit/test_transition.py::TestTransition::test_wait_to_repro
  /home/jules/.pyenv/versions/3.12.11/lib/python3.12/unittest/case.py:589: RuntimeWarning: coroutine 'TestTransition.test_wait_to_repro' was never awaited
    if method() is not None:
  Enable tracemalloc to get traceback where the object was allocated.
  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.

triangulum_lx/tests/unit/test_transition.py::TestTransition::test_wait_to_repro
  /home/jules/.pyenv/versions/3.12.11/lib/python3.12/unittest/case.py:690: DeprecationWarning: It is deprecated to return a value that is not None from a test case (<bound method TestTransition.test_wait_to_repro of <triangulum_lx.tests.unit.test_transition.TestTransition testMethod=test_wait_to_repro>>)
    return self.run(*args, **kwds)

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
FAILED tests/edge_cases/test_folder_healing_edge_cases.py::TestFolderHealingEdgeCases::test_circular_dependencies
FAILED tests/edge_cases/test_folder_healing_edge_cases.py::TestFolderHealingEdgeCases::test_corrupted_file
FAILED tests/edge_cases/test_folder_healing_edge_cases.py::TestFolderHealingEdgeCases::test_empty_folder
FAILED tests/edge_cases/test_folder_healing_edge_cases.py::TestFolderHealingEdgeCases::test_many_small_files
FAILED tests/edge_cases/test_folder_healing_edge_cases.py::TestFolderHealingEdgeCases::test_mixed_languages
FAILED tests/edge_cases/test_folder_healing_edge_cases.py::TestFolderHealingEdgeCases::test_unusual_encoding
FAILED tests/edge_cases/test_folder_healing_edge_cases.py::TestFolderHealingEdgeCases::test_unusual_file_extensions
FAILED tests/edge_cases/test_folder_healing_edge_cases.py::TestFolderHealingEdgeCases::test_very_deep_directory_structure
FAILED tests/edge_cases/test_folder_healing_edge_cases.py::TestFolderHealingEdgeCases::test_very_large_file
FAILED tests/integration/test_folder_healing.py::TestFolderHealing::test_folder_healing_dry_run
FAILED tests/integration/test_folder_healing.py::TestFolderHealing::test_orchestrator_real_healing_simulation
FAILED tests/integration/test_system_startup_integration.py::TestSystemStartupIntegration::test_graceful_shutdown
FAILED tests/integration/test_system_startup_integration.py::TestSystemStartupIntegration::test_startup_dashboard_integration
FAILED tests/integration/test_system_startup_integration.py::TestSystemStartupIntegration::test_system_health_monitoring
FAILED tests/unit/test_bug_detector_agent.py::TestBugDetectorAgent::test_analyze_test_failure
FAILED tests/unit/test_bug_detector_agent.py::TestBugDetectorAgent::test_binary_file_detection
FAILED tests/unit/test_bug_detector_agent.py::TestBugDetectorAgent::test_bug_pattern_management
FAILED tests/unit/test_bug_detector_agent.py::TestBugDetectorAgent::test_detect_exception_swallowing_bug
FAILED tests/unit/test_bug_detector_agent.py::TestBugDetectorAgent::test_detect_hardcoded_credentials_bug
FAILED tests/unit/test_bug_detector_agent.py::TestBugDetectorAgent::test_detect_null_reference_bug
FAILED tests/unit/test_bug_detector_agent.py::TestBugDetectorAgent::test_detect_resource_leak_bug
FAILED tests/unit/test_bug_detector_agent.py::TestBugDetectorAgent::test_detect_sql_injection_bug
FAILED tests/unit/test_bug_detector_agent.py::TestBugDetectorAgent::test_encoding_detection_and_handling
FAILED tests/unit/test_bug_detector_agent.py::TestBugDetectorAgent::test_error_handling
FAILED tests/unit/test_bug_detector_agent.py::TestBugDetectorAgent::test_error_response_in_message_handling
FAILED tests/unit/test_bug_detector_agent.py::TestBugDetectorAgent::test_extract_error_location
FAILED tests/unit/test_bug_detector_agent.py::TestBugDetectorAgent::test_extract_error_type
FAILED tests/unit/test_bug_detector_agent.py::TestBugDetectorAgent::test_file_not_found_error_handling
FAILED tests/unit/test_bug_detector_agent.py::TestBugDetectorAgent::test_file_size_limit
FAILED tests/unit/test_bug_detector_agent.py::TestBugDetectorAgent::test_folder_analysis_error_handling
FAILED tests/unit/test_bug_detector_agent.py::TestBugDetectorAgent::test_handle_query_get_bug_patterns
FAILED tests/unit/test_bug_detector_agent.py::TestBugDetectorAgent::test_handle_task_request_detect_bugs
FAILED tests/unit/test_bug_detector_agent.py::TestBugDetectorAgent::test_infer_language_from_path
FAILED tests/unit/test_bug_detector_agent.py::TestBugDetectorAgent::test_regex_error_handling
FAILED tests/unit/test_bug_detector_enhancements.py::TestBugDetectorEnhancements::test_bug_classification
FAILED tests/unit/test_bug_detector_enhancements.py::TestBugDetectorEnhancements::test_context_aware_detection
FAILED tests/unit/test_bug_detector_enhancements.py::TestBugDetectorEnhancements::test_false_positive_reduction
FAILED tests/unit/test_bug_detector_enhancements.py::TestBugDetectorEnhancements::test_folder_analysis_performance
FAILED tests/unit/test_bug_detector_enhancements.py::TestBugDetectorEnhancements::test_relationship_integration
FAILED tests/unit/test_enhanced_message_bus.py::TestEnhancedMessageBus::test_circuit_breaker
FAILED tests/unit/test_enhanced_message_bus.py::TestEnhancedMessageBus::test_delivery_status_tracking
FAILED tests/unit/test_enhanced_message_bus.py::TestEnhancedMessageBus::test_large_message_handling
FAILED tests/unit/test_enhanced_message_bus.py::TestEnhancedMessageBus::test_message_deduplication
FAILED tests/unit/test_enhanced_message_bus.py::TestEnhancedMessageBus::test_performance_metrics
FAILED tests/unit/test_enhanced_message_bus.py::TestEnhancedMessageBus::test_subscribe_and_publish
FAILED tests/unit/test_enhanced_message_bus.py::TestEnhancedMessageBus::test_thought_chain_integration
FAILED tests/unit/test_enhanced_message_bus.py::TestEnhancedMessageBus::test_timeout_handling
FAILED tests/unit/test_feedback_collector.py::TestFeedbackCollector::test_analyze_feedback
FAILED tests/unit/test_feedback_collector.py::TestFeedbackCollector::test_export_feedback_json
FAILED tests/unit/test_fs_ops.py::test_fsync_mocked - AttributeError: module ...
FAILED tests/unit/test_orchestrator_agent.py::TestOrchestratorAgent::test_orchestrate_file_healing_with_bug
FAILED tests/unit/test_priority_analyzer_agent.py::TestPriorityAnalyzerAgent::test_analyze_priorities
FAILED tests/unit/test_relationship_analyst_agent.py::TestRelationshipAnalystAgent::test_analyze_codebase
FAILED tests/unit/test_relationship_analyst_agent.py::TestRelationshipAnalystAgent::test_error_handling
FAILED tests/unit/test_relationship_analyst_agent.py::TestRelationshipAnalystAgent::test_find_cycles
FAILED tests/unit/test_relationship_analyst_agent.py::TestRelationshipAnalystAgent::test_get_file_dependencies
FAILED tests/unit/test_relationship_analyst_agent.py::TestRelationshipAnalystAgent::test_get_file_dependents
FAILED tests/unit/test_relationship_analyst_agent.py::TestRelationshipAnalystAgent::test_get_impacted_files
FAILED tests/unit/test_relationship_analyst_agent.py::TestRelationshipAnalystAgent::test_get_most_central_files
FAILED tests/unit/test_relationship_analyst_agent.py::TestRelationshipAnalystAgent::test_handle_query_central_files
FAILED tests/unit/test_relationship_analyst_agent.py::TestRelationshipAnalystAgent::test_handle_query_file_dependencies
FAILED tests/unit/test_relationship_analyst_agent.py::TestRelationshipAnalystAgent::test_handle_task_request_analyze_codebase
FAILED tests/unit/test_relationship_analyst_agent.py::TestRelationshipAnalystAgent::test_prioritize_files_for_repair
FAILED tests/unit/test_relationship_analyst_agent.py::TestRelationshipAnalystAgent::test_process_message
FAILED tests/unit/test_response_handling.py::TestResponseHandling::test_chunking_and_reassembly
FAILED tests/unit/test_response_handling.py::TestResponseHandling::test_large_response_handler
FAILED tests/unit/test_response_handling.py::TestResponseHandling::test_validation
FAILED tests/unit/test_strategy_agent.py::TestStrategyAgent::test_determine_bug_type
FAILED tests/unit/test_strategy_agent.py::TestStrategyAgent::test_evaluate_strategy_acceptable
FAILED tests/unit/test_strategy_agent.py::TestStrategyAgent::test_evaluate_strategy_unacceptable
FAILED tests/unit/test_strategy_agent.py::TestStrategyAgent::test_extract_variables
FAILED tests/unit/test_strategy_agent.py::TestStrategyAgent::test_formulate_strategy_null_pointer
FAILED tests/unit/test_strategy_agent.py::TestStrategyAgent::test_formulate_strategy_resource_leak
FAILED tests/unit/test_strategy_agent.py::TestStrategyAgent::test_handle_error_messages
FAILED tests/unit/test_strategy_agent.py::TestStrategyAgent::test_handle_other_message
FAILED tests/unit/test_strategy_agent.py::TestStrategyAgent::test_handle_query_get_strategy_templates
FAILED tests/unit/test_strategy_agent.py::TestStrategyAgent::test_handle_task_request_formulate_strategy
FAILED tests/unit/test_system_monitor.py::TestSystemMonitor::test_export_metrics
FAILED triangulum_lx/tests/smoke/test_simple_bug.py::TestSimpleBug::test_bug_resolution_flow
====== 79 failed, 359 passed, 5 skipped, 61 warnings in 106.11s (0:01:46) ======
